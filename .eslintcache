[{"/home/pc/Desktop/DWallet/src/index.js":"1","/home/pc/Desktop/DWallet/src/App.js":"2","/home/pc/Desktop/DWallet/src/serviceWorker.js":"3","/home/pc/Desktop/DWallet/src/components/DialogForm.js":"4","/home/pc/Desktop/DWallet/src/components/NavigationFrame.js":"5","/home/pc/Desktop/DWallet/src/components/LoadingIndicator.js":"6","/home/pc/Desktop/DWallet/src/utils/wallet.js":"7","/home/pc/Desktop/DWallet/src/pages/WalletPage.js":"8","/home/pc/Desktop/DWallet/src/pages/LoginPage.js":"9","/home/pc/Desktop/DWallet/src/utils/page.js":"10","/home/pc/Desktop/DWallet/src/pages/ConnectionsPage.js":"11","/home/pc/Desktop/DWallet/src/pages/PopupPage.js":"12","/home/pc/Desktop/DWallet/src/utils/tokens/names.js":"13","/home/pc/Desktop/DWallet/src/utils/connected-wallets.js":"14","/home/pc/Desktop/DWallet/src/utils/utils.ts":"15","/home/pc/Desktop/DWallet/src/utils/connection.tsx":"16","/home/pc/Desktop/DWallet/src/components/ExportAccountDialog.js":"17","/home/pc/Desktop/DWallet/src/utils/clusters.js":"18","/home/pc/Desktop/DWallet/src/components/AddAccountDialog.js":"19","/home/pc/Desktop/DWallet/src/components/ConnectionIcon.js":"20","/home/pc/Desktop/DWallet/src/components/SolanaIcon.js":"21","/home/pc/Desktop/DWallet/src/components/AddCustomClusterDialog.js":"22","/home/pc/Desktop/DWallet/src/components/AddHarwareWalletDialog.js":"23","/home/pc/Desktop/DWallet/src/components/DeleteMnemonicDialog.js":"24","/home/pc/Desktop/DWallet/src/utils/tokens/instructions.js":"25","/home/pc/Desktop/DWallet/src/utils/tokens/data.js":"26","/home/pc/Desktop/DWallet/src/utils/wallet-seed.js":"27","/home/pc/Desktop/DWallet/src/components/BalancesList.js":"28","/home/pc/Desktop/DWallet/src/components/SignFormContent.js":"29","/home/pc/Desktop/DWallet/src/utils/walletProvider/factory.js":"30","/home/pc/Desktop/DWallet/src/utils/walletProvider/localStorage.js":"31","/home/pc/Desktop/DWallet/src/components/SignTransactionFormContent.js":"32","/home/pc/Desktop/DWallet/src/utils/fetch-loop.ts":"33","/home/pc/Desktop/DWallet/src/components/ConnectionsList.js":"34","/home/pc/Desktop/DWallet/src/utils/notifications.js":"35","/home/pc/Desktop/DWallet/src/utils/walletProvider/ledger.js":"36","/home/pc/Desktop/DWallet/src/components/instructions/TokenInstruction.js":"37","/home/pc/Desktop/DWallet/src/utils/tokens/index.js":"38","/home/pc/Desktop/DWallet/src/utils/diffie-hellman/index.js":"39","/home/pc/Desktop/DWallet/src/components/DomainsList.tsx":"40","/home/pc/Desktop/DWallet/src/utils/walletProvider/ledger-core.js":"41","/home/pc/Desktop/DWallet/src/components/instructions/LabelValue.js":"42","/home/pc/Desktop/DWallet/src/utils/diffie-hellman/ed2curve.js":"43","/home/pc/Desktop/DWallet/src/utils/name-service/index.ts":"44","/home/pc/Desktop/DWallet/src/components/instructions/DexInstruction.js":"45","/home/pc/Desktop/DWallet/src/components/instructions/SystemInstruction.js":"46","/home/pc/Desktop/DWallet/src/components/instructions/StakeInstruction.js":"47","/home/pc/Desktop/DWallet/src/components/instructions/UnknownInstruction.js":"48","/home/pc/Desktop/DWallet/src/components/instructions/NewOrder.js":"49","/home/pc/Desktop/DWallet/src/utils/transactions.ts":"50","/home/pc/Desktop/DWallet/src/components/SwapButton.js":"51","/home/pc/Desktop/DWallet/src/components/MergeAccountsDialog.js":"52","/home/pc/Desktop/DWallet/src/components/EditAccountNameDialog.js":"53","/home/pc/Desktop/DWallet/src/components/TokenIcon.js":"54","/home/pc/Desktop/DWallet/src/components/CloseTokenAccountButton.js":"55","/home/pc/Desktop/DWallet/src/utils/config.js":"56","/home/pc/Desktop/DWallet/src/components/DepositDialog.js":"57","/home/pc/Desktop/DWallet/src/components/SendDialog.js":"58","/home/pc/Desktop/DWallet/src/utils/swap/api.js":"59","/home/pc/Desktop/DWallet/src/utils/markets.ts":"60","/home/pc/Desktop/DWallet/src/utils/region.ts":"61","/home/pc/Desktop/DWallet/src/components/AddTokenDialog.js":"62","/home/pc/Desktop/DWallet/src/components/FtxPay/FtxPayDialog.js":"63","/home/pc/Desktop/DWallet/src/components/TokenInfoDialog.js":"64","/home/pc/Desktop/DWallet/src/utils/swap/eth.js":"65","/home/pc/Desktop/DWallet/src/components/CopyableDisplay.js":"66","/home/pc/Desktop/DWallet/src/components/EthFeeEstimate.tsx":"67"},{"size":697,"mtime":1677753775945,"results":"68","hashOfConfig":"69"},{"size":5625,"mtime":1677851291271,"results":"70","hashOfConfig":"69"},{"size":5103,"mtime":1677751768010,"results":"71","hashOfConfig":"69"},{"size":720,"mtime":1677751768006,"results":"72","hashOfConfig":"69"},{"size":14013,"mtime":1678110651785,"results":"73","hashOfConfig":"69"},{"size":913,"mtime":1677751768010,"results":"74","hashOfConfig":"69"},{"size":13625,"mtime":1678111440176,"results":"75","hashOfConfig":"69"},{"size":992,"mtime":1677751768010,"results":"76","hashOfConfig":"69"},{"size":16895,"mtime":1678109033306,"results":"77","hashOfConfig":"69"},{"size":385,"mtime":1677751768010,"results":"78","hashOfConfig":"69"},{"size":866,"mtime":1677751768010,"results":"79","hashOfConfig":"69"},{"size":15233,"mtime":1677851291279,"results":"80","hashOfConfig":"69"},{"size":14427,"mtime":1677751768010,"results":"81","hashOfConfig":"69"},{"size":975,"mtime":1677751768010,"results":"82","hashOfConfig":"69"},{"size":3255,"mtime":1677751768010,"results":"83","hashOfConfig":"69"},{"size":4004,"mtime":1677766555651,"results":"84","hashOfConfig":"69"},{"size":2369,"mtime":1677751768010,"results":"85","hashOfConfig":"69"},{"size":1490,"mtime":1677751768010,"results":"86","hashOfConfig":"69"},{"size":2588,"mtime":1677751768006,"results":"87","hashOfConfig":"69"},{"size":825,"mtime":1677751768006,"results":"88","hashOfConfig":"69"},{"size":929,"mtime":1677751768010,"results":"89","hashOfConfig":"69"},{"size":1647,"mtime":1677751768006,"results":"90","hashOfConfig":"69"},{"size":5947,"mtime":1677851291279,"results":"91","hashOfConfig":"69"},{"size":2212,"mtime":1677751768006,"results":"92","hashOfConfig":"69"},{"size":5217,"mtime":1677751768010,"results":"93","hashOfConfig":"69"},{"size":967,"mtime":1677751768010,"results":"94","hashOfConfig":"69"},{"size":6821,"mtime":1677751768010,"results":"95","hashOfConfig":"69"},{"size":25472,"mtime":1678114179788,"results":"96","hashOfConfig":"69"},{"size":2829,"mtime":1677751768010,"results":"97","hashOfConfig":"69"},{"size":355,"mtime":1677751768010,"results":"98","hashOfConfig":"69"},{"size":2135,"mtime":1677751768010,"results":"99","hashOfConfig":"69"},{"size":10384,"mtime":1678111461519,"results":"100","hashOfConfig":"69"},{"size":5715,"mtime":1677751768010,"results":"101","hashOfConfig":"69"},{"size":4444,"mtime":1677751768006,"results":"102","hashOfConfig":"69"},{"size":2665,"mtime":1678111461523,"results":"103","hashOfConfig":"69"},{"size":1907,"mtime":1677751768010,"results":"104","hashOfConfig":"69"},{"size":2494,"mtime":1677751768010,"results":"105","hashOfConfig":"69"},{"size":10133,"mtime":1677851306983,"results":"106","hashOfConfig":"69"},{"size":372,"mtime":1677751768010,"results":"107","hashOfConfig":"69"},{"size":8334,"mtime":1677751768006,"results":"108","hashOfConfig":"69"},{"size":4603,"mtime":1677751768010,"results":"109","hashOfConfig":"69"},{"size":501,"mtime":1677751768010,"results":"110","hashOfConfig":"69"},{"size":6140,"mtime":1677751768010,"results":"111","hashOfConfig":"69"},{"size":3595,"mtime":1677851306983,"results":"112","hashOfConfig":"69"},{"size":2261,"mtime":1677751768010,"results":"113","hashOfConfig":"69"},{"size":1657,"mtime":1677751768010,"results":"114","hashOfConfig":"69"},{"size":2308,"mtime":1677751768010,"results":"115","hashOfConfig":"69"},{"size":1342,"mtime":1677751768010,"results":"116","hashOfConfig":"69"},{"size":1983,"mtime":1677751768010,"results":"117","hashOfConfig":"69"},{"size":13748,"mtime":1677751768010,"results":"118","hashOfConfig":"69"},{"size":4474,"mtime":1677751768010,"results":"119","hashOfConfig":"69"},{"size":10253,"mtime":1677751768010,"results":"120","hashOfConfig":"69"},{"size":1316,"mtime":1677751768010,"results":"121","hashOfConfig":"69"},{"size":653,"mtime":1677751768010,"results":"122","hashOfConfig":"69"},{"size":1727,"mtime":1677751768006,"results":"123","hashOfConfig":"69"},{"size":125,"mtime":1677751768010,"results":"124","hashOfConfig":"69"},{"size":12046,"mtime":1678111461519,"results":"125","hashOfConfig":"69"},{"size":24953,"mtime":1678112592908,"results":"126","hashOfConfig":"69"},{"size":1257,"mtime":1677751768010,"results":"127","hashOfConfig":"69"},{"size":2273,"mtime":1677751768010,"results":"128","hashOfConfig":"69"},{"size":259,"mtime":1677751768010,"results":"129","hashOfConfig":"69"},{"size":9088,"mtime":1678111461519,"results":"130","hashOfConfig":"69"},{"size":4767,"mtime":1678111461519,"results":"131","hashOfConfig":"69"},{"size":2250,"mtime":1678111461519,"results":"132","hashOfConfig":"69"},{"size":6767,"mtime":1677751768010,"results":"133","hashOfConfig":"69"},{"size":2402,"mtime":1677751768006,"results":"134","hashOfConfig":"69"},{"size":2090,"mtime":1677854922915,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},"15qd31s",{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"139"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"168"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"269"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},"/home/pc/Desktop/DWallet/src/index.js",["276"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n    );\n  };\n\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n",["277","278"],"/home/pc/Desktop/DWallet/src/App.js",[],"/home/pc/Desktop/DWallet/src/serviceWorker.js",[],"/home/pc/Desktop/DWallet/src/components/DialogForm.js",[],"/home/pc/Desktop/DWallet/src/components/NavigationFrame.js",[],"/home/pc/Desktop/DWallet/src/components/LoadingIndicator.js",[],"/home/pc/Desktop/DWallet/src/utils/wallet.js",[],"/home/pc/Desktop/DWallet/src/pages/WalletPage.js",[],"/home/pc/Desktop/DWallet/src/pages/LoginPage.js",[],"/home/pc/Desktop/DWallet/src/utils/page.js",[],"/home/pc/Desktop/DWallet/src/pages/ConnectionsPage.js",[],"/home/pc/Desktop/DWallet/src/pages/PopupPage.js",[],"/home/pc/Desktop/DWallet/src/utils/tokens/names.js",[],"/home/pc/Desktop/DWallet/src/utils/connected-wallets.js",[],"/home/pc/Desktop/DWallet/src/utils/utils.ts",[],["279","280"],"/home/pc/Desktop/DWallet/src/utils/connection.tsx",[],"/home/pc/Desktop/DWallet/src/components/ExportAccountDialog.js",[],"/home/pc/Desktop/DWallet/src/utils/clusters.js",[],"/home/pc/Desktop/DWallet/src/components/AddAccountDialog.js",[],"/home/pc/Desktop/DWallet/src/components/ConnectionIcon.js",[],"/home/pc/Desktop/DWallet/src/components/SolanaIcon.js",[],"/home/pc/Desktop/DWallet/src/components/AddCustomClusterDialog.js",[],"/home/pc/Desktop/DWallet/src/components/AddHarwareWalletDialog.js",[],"/home/pc/Desktop/DWallet/src/components/DeleteMnemonicDialog.js",[],"/home/pc/Desktop/DWallet/src/utils/tokens/instructions.js",[],"/home/pc/Desktop/DWallet/src/utils/tokens/data.js",[],"/home/pc/Desktop/DWallet/src/utils/wallet-seed.js",[],"/home/pc/Desktop/DWallet/src/components/BalancesList.js",["281","282","283","284","285","286","287","288","289","290","291"],"import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n  useWalletPublicKeys,\n  useWalletSelector,\n} from '../utils/wallet';\nimport { findAssociatedTokenAddress } from '../utils/tokens';\nimport LoadingIndicator from './LoadingIndicator';\nimport Collapse from '@material-ui/core/Collapse';\nimport { Typography } from '@material-ui/core';\nimport TokenInfoDialog from './TokenInfoDialog';\nimport FtxPayDialog from './FtxPay/FtxPayDialog';\nimport Link from '@material-ui/core/Link';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { abbreviateAddress, useIsExtensionWidth } from '../utils/utils';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MergeType from '@material-ui/icons/MergeType';\nimport SortIcon from '@material-ui/icons/Sort';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddTokenDialog from './AddTokenDialog';\nimport ExportAccountDialog from './ExportAccountDialog';\nimport ftxPayIcon from './FtxPay/icon.png';\nimport SendDialog from './SendDialog';\nimport DepositDialog from './DepositDialog';\nimport {\n  useIsProdNetwork,\n  refreshAccountInfo,\n  useSolanaExplorerUrlSuffix,\n} from '../utils/connection';\nimport { useRegion } from '../utils/region';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { serumMarkets, priceStore } from '../utils/markets';\nimport { swapApiRequest } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport { showTokenInfoDialog } from '../utils/config';\nimport { useConnection } from '../utils/connection';\nimport { shortenAddress } from '../utils/utils';\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TokenIcon from './TokenIcon';\nimport EditAccountNameDialog from './EditAccountNameDialog';\nimport MergeAccountsDialog from './MergeAccountsDialog';\nimport SwapButton from './SwapButton';\nimport DnsIcon from '@material-ui/icons/Dns';\nimport DomainsList from './DomainsList';\n\nconst balanceFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n  useGrouping: true,\n});\n\nconst SortAccounts = {\n  None: 0,\n  Ascending: 1,\n  Descending: 2,\n};\n\n// Aggregated $USD values of all child BalanceListItems child components.\n//\n// Values:\n// * undefined => loading.\n// * null => no market exists.\n// * float => done.\n//\n// For a given set of publicKeys, we know all the USD values have been loaded when\n// all of their values in this object are not `undefined`.\nconst usdValues = {};\n\n// Calculating associated token addresses is an asynchronous operation, so we cache\n// the values so that we can quickly render components using them. This prevents\n// flickering for the associated token fingerprint icon.\nconst associatedTokensCache = {};\n\nconst numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nfunction fairsIsLoaded(publicKeys) {\n  return (\n    publicKeys.filter((pk) => usdValues[pk.toString()] !== undefined).length ===\n    publicKeys.length\n  );\n}\n\nexport default function BalancesList() {\n  const wallet = useWallet();\n  const [publicKeys, loaded] = useWalletPublicKeys();\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(\n    false,\n  );\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\n  const [showFtxPayDialog, setShowFtxPayDialog] = useState(false);\n  const [sortAccounts, setSortAccounts] = useState(SortAccounts.None);\n  const [showDomains, setShowDomains] = useState(false);\n  const { accounts, setAccountName } = useWalletSelector();\n  const [isCopied, setIsCopied] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  // Dummy var to force rerenders on demand.\n  const [, setForceUpdate] = useState(false);\n  const region = useRegion();\n  const selectedAccount = accounts.find((a) => a.isSelected);\n  const allTokensLoaded = loaded && fairsIsLoaded(publicKeys);\n  let sortedPublicKeys = publicKeys;\n  if (allTokensLoaded && sortAccounts !== SortAccounts.None) {\n    sortedPublicKeys = [...publicKeys];\n    sortedPublicKeys.sort((a, b) => {\n      const aVal = usdValues[a.toString()];\n      const bVal = usdValues[b.toString()];\n\n      a = aVal === undefined || aVal === null ? -1 : aVal;\n      b = bVal === undefined || bVal === null ? -1 : bVal;\n      if (sortAccounts === SortAccounts.Descending) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        } else {\n          return 0;\n        }\n      } else {\n        if (b < a) {\n          return -1;\n        } else if (b > a) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n  }\n  const totalUsdValue = publicKeys\n    .filter((pk) => usdValues[pk.toString()])\n    .map((pk) => usdValues[pk.toString()])\n    .reduce((a, b) => a + b, 0.0);\n\n  // Memoized callback and component for the `BalanceListItems`.\n  //\n  // The `BalancesList` fetches data, e.g., fairs for tokens using React hooks\n  // in each of the child `BalanceListItem` components. However, we want the\n  // parent component, to aggregate all of this data together, for example,\n  // to show the cumulative USD amount in the wallet.\n  //\n  // To achieve this, we need to pass a callback from the parent to the chlid,\n  // so that the parent can collect the results of all the async network requests.\n  // However, this can cause a render loop, since invoking the callback can cause\n  // the parent to rerender, which causese the child to rerender, which causes\n  // the callback to be invoked.\n  //\n  // To solve this, we memoize all the `BalanceListItem` children components.\n  const setUsdValuesCallback = useCallback(\n    (publicKey, usdValue) => {\n      if (usdValues[publicKey.toString()] !== usdValue) {\n        usdValues[publicKey.toString()] = usdValue;\n        if (fairsIsLoaded(publicKeys)) {\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      }\n    },\n    [publicKeys],\n  );\n  const balanceListItemsMemo = useMemo(() => {\n    return sortedPublicKeys.map((pk) => {\n      return React.memo((props) => {\n        return (\n          <BalanceListItem\n            key={pk.toString()}\n            publicKey={pk}\n            setUsdValue={setUsdValuesCallback}\n          />\n        );\n      });\n    });\n  }, [sortedPublicKeys, setUsdValuesCallback]);\n\n  const iconSize = isExtensionWidth ? 'small' : 'medium';\n\n  return (\n    <Paper>\n      <AppBar position=\"static\" color=\"default\" elevation={1}>\n        <Toolbar>\n          <CopyToClipboard\n            text={selectedAccount && selectedAccount.address.toBase58()}\n            onCopy={() => {\n              setIsCopied(true);\n              setTimeout(() => {\n                setIsCopied(false);\n              }, 1000);\n            }}\n          >\n            <Tooltip\n              title={\n                <Typography>\n                  {isCopied ? 'Copied' : 'Copy to clipboard'}\n                </Typography>\n              }\n              style={{ fontSize: '10rem' }}\n            >\n              <Typography\n                variant=\"h6\"\n                style={{\n                  flexGrow: 1,\n                  fontSize: isExtensionWidth && '1rem',\n                  cursor: 'pointer',\n                }}\n                hover={true}\n                component=\"h2\"\n              >\n                {selectedAccount && selectedAccount.name}\n                {isExtensionWidth\n                  ? ''\n                  : ` (${\n                      selectedAccount &&\n                      shortenAddress(selectedAccount.address.toBase58())\n                    })`}{' '}\n                {allTokensLoaded && (\n                  <>({numberFormat.format(totalUsdValue.toFixed(2))})</>\n                )}\n              </Typography>\n            </Tooltip>\n          </CopyToClipboard>\n          {selectedAccount &&\n            selectedAccount.name !== 'Main account' &&\n            selectedAccount.name !== 'Hardware wallet' && (\n              <Tooltip title=\"Edit Account Name\" arrow>\n                <IconButton\n                  size={iconSize}\n                  onClick={() => setShowEditAccountNameDialog(true)}\n                >\n                  <EditIcon />\n                </IconButton>\n              </Tooltip>\n            )}\n          {/* <Tooltip title=\"Deposit via FTX Pay\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowFtxPayDialog(true)}\n            >\n              <img\n                title={'FTX Pay'}\n                alt={'FTX Pay'}\n                style={{\n                  width: 20,\n                  height: 20,\n                }}\n                src={ftxPayIcon}\n              />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"See your domains\" arrow>\n            <IconButton size={iconSize} onClick={() => setShowDomains(true)}>\n              <DnsIcon />\n            </IconButton>\n          </Tooltip>\n          <DomainsList open={showDomains} setOpen={setShowDomains} />\n          {region.result && !region.result.isRestricted && <SwapButton size={iconSize} />}\n          <Tooltip title=\"Migrate Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowMergeAccounts(true)}\n            >\n              <MergeType />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Add Token\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowAddTokenDialog(true)}\n            >\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Sort Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                switch (sortAccounts) {\n                  case SortAccounts.None:\n                    setSortAccounts(SortAccounts.Ascending);\n                    return;\n                  case SortAccounts.Ascending:\n                    setSortAccounts(SortAccounts.Descending);\n                    return;\n                  case SortAccounts.Descending:\n                    setSortAccounts(SortAccounts.None);\n                    return;\n                  default:\n                    console.error('invalid sort type', sortAccounts);\n                }\n              }}\n            >\n              <SortIcon />\n            </IconButton>\n          </Tooltip> */}\n          <Tooltip title=\"Refresh\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                refreshWalletPublicKeys(wallet);\n                publicKeys.map((publicKey) =>\n                  refreshAccountInfo(wallet.connection, publicKey, true),\n                );\n              }}\n              style={{ marginRight: -12 }}\n            >\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <List disablePadding>\n        {balanceListItemsMemo.map((Memoized) => (\n          <Memoized />\n        ))}\n        {loaded ? null : <LoadingIndicator />}\n      </List>\n      <AddTokenDialog\n        open={showAddTokenDialog}\n        onClose={() => setShowAddTokenDialog(false)}\n      />\n      <FtxPayDialog\n        open={showFtxPayDialog}\n        publicKeys={publicKeys}\n        onClose={() => setShowFtxPayDialog(false)}\n      />\n      <EditAccountNameDialog\n        open={showEditAccountNameDialog}\n        onClose={() => setShowEditAccountNameDialog(false)}\n        oldName={selectedAccount ? selectedAccount.name : ''}\n        onEdit={(name) => {\n          setAccountName(selectedAccount.selector, name);\n          setShowEditAccountNameDialog(false);\n        }}\n      />\n      <MergeAccountsDialog\n        open={showMergeAccounts}\n        onClose={() => setShowMergeAccounts(false)}\n      />\n    </Paper>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  address: {\n    textOverflow: 'ellipsis',\n    overflowX: 'hidden',\n  },\n  itemDetails: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(2),\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  viewDetails: {\n    '&:hover': {\n      cursor: 'pointer',\n    },\n  },\n}));\n\nexport function BalanceListItem({ publicKey, expandable, setUsdValue }) {\n  const wallet = useWallet();\n  const balanceInfo = useBalanceInfo(publicKey);\n  const classes = useStyles();\n  const connection = useConnection();\n  const [open, setOpen] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  const [, setForceUpdate] = useState(false);\n  // Valid states:\n  //   * undefined => loading.\n  //   * null => not found.\n  //   * else => price is loaded.\n  const [price, setPrice] = useState(undefined);\n  useEffect(() => {\n    if (balanceInfo) {\n      if (balanceInfo.tokenSymbol) {\n        const coin = balanceInfo.tokenSymbol.toUpperCase();\n        // Don't fetch USD stable coins. Mark to 1 USD.\n        if (coin === 'USDT' || coin === 'USDC') {\n          setPrice(1);\n        }\n        // A Serum market exists. Fetch the price.\n        else if (serumMarkets[coin]) {\n          let m = serumMarkets[coin];\n          priceStore\n            .getPrice(connection, m.name)\n            .then((price) => {\n              setPrice(price);\n            })\n            .catch((err) => {\n              console.error(err);\n              setPrice(null);\n            });\n        }\n        // No Serum market exists.\n        else {\n          setPrice(null);\n        }\n      }\n      // No token symbol so don't fetch market data.\n      else {\n        setPrice(null);\n      }\n    }\n  }, [price, balanceInfo, connection]);\n\n  expandable = expandable === undefined ? true : expandable;\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let {\n    amount,\n    decimals,\n    mint,\n    tokenName,\n    tokenSymbol,\n    tokenLogoUri,\n  } = balanceInfo;\n  tokenName = tokenName ?? abbreviateAddress(mint);\n  let displayName;\n  if (isExtensionWidth) {\n    displayName = tokenSymbol ?? tokenName;\n  } else {\n    displayName = tokenName + (tokenSymbol ? ` (${tokenSymbol})` : '');\n  }\n\n  // Fetch and cache the associated token address.\n  if (wallet && wallet.publicKey && mint) {\n    if (\n      associatedTokensCache[wallet.publicKey.toString()] === undefined ||\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()] ===\n        undefined\n    ) {\n      findAssociatedTokenAddress(wallet.publicKey, mint).then((assocTok) => {\n        let walletAccounts = Object.assign(\n          {},\n          associatedTokensCache[wallet.publicKey.toString()],\n        );\n        walletAccounts[mint.toString()] = assocTok;\n        associatedTokensCache[wallet.publicKey.toString()] = walletAccounts;\n        if (assocTok.equals(publicKey)) {\n          // Force a rerender now that we've cached the value.\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      });\n    }\n  }\n\n  // undefined => not loaded.\n  let isAssociatedToken = mint ? undefined : false;\n  if (\n    wallet &&\n    wallet.publicKey &&\n    mint &&\n    associatedTokensCache[wallet.publicKey.toString()]\n  ) {\n    let acc =\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()];\n    if (acc) {\n      if (acc.equals(publicKey)) {\n        isAssociatedToken = true;\n      } else {\n        isAssociatedToken = false;\n      }\n    }\n  }\n\n  const subtitle =\n    isExtensionWidth || !publicKey.equals(balanceInfo.owner) ? undefined : (\n      <div style={{ display: 'flex', height: '20px', overflow: 'hidden' }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          {publicKey.toBase58()}\n        </div>\n      </div>\n    );\n\n  const usdValue =\n    price === undefined // Not yet loaded.\n      ? undefined\n      : price === null // Loaded and empty.\n      ? null\n      : ((amount / Math.pow(10, decimals)) * price).toFixed(2); // Loaded.\n  if (setUsdValue && usdValue !== undefined) {\n    setUsdValue(publicKey, usdValue === null ? null : parseFloat(usdValue));\n  }\n\n  return (\n    <>\n      <ListItem button onClick={() => expandable && setOpen((open) => !open)}>\n        <ListItemIcon>\n          <TokenIcon\n            mint={mint}\n            tokenName={tokenName}\n            url={tokenLogoUri}\n            size={28}\n          />\n        </ListItemIcon>\n        <div style={{ display: 'flex', flex: 1 }}>\n          <ListItemText\n            primary={\n              <>\n                {balanceFormat.format(amount / Math.pow(10, decimals))}{' '}\n                {displayName}\n              </>\n            }\n            secondary={subtitle}\n            secondaryTypographyProps={{ className: classes.address }}\n          />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n            }}\n          >\n            {price && (\n              <Typography color=\"textSecondary\">\n                {numberFormat.format(usdValue)}\n              </Typography>\n            )}\n          </div>\n        </div>\n        {expandable ? open ? <ExpandLess /> : <ExpandMore /> : <></>}\n      </ListItem>\n      {expandable && (\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <BalanceListItemDetails\n            isAssociatedToken={isAssociatedToken}\n            publicKey={publicKey}\n            serumMarkets={serumMarkets}\n            balanceInfo={balanceInfo}\n          />\n        </Collapse>\n      )}\n    </>\n  );\n}\n\nfunction BalanceListItemDetails({\n  publicKey,\n  serumMarkets,\n  balanceInfo,\n  isAssociatedToken,\n}) {\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const classes = useStyles();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\n  const [\n    closeTokenAccountDialogOpen,\n    setCloseTokenAccountDialogOpen,\n  ] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const wallet = useWallet();\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n    return await swapApiRequest(\n      'POST',\n      'swap_to',\n      {\n        blockchain: 'domi',\n        coin: balanceInfo.mint?.toBase58(),\n        address: publicKey.toBase58(),\n      },\n      { ignoreUserErrors: true },\n    );\n  }, [\n    'swapInfo',\n    isProdNetwork,\n    balanceInfo.mint?.toBase58(),\n    publicKey.toBase58(),\n  ]);\n  const isExtensionWidth = useIsExtensionWidth();\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let { mint, tokenName, tokenSymbol, owner, amount } = balanceInfo;\n\n  // Only show the export UI for the native DOMI coin.\n  const exportNeedsDisplay =\n    mint === null && tokenName === 'DOMI' && tokenSymbol === 'DOMI';\n\n  const market = tokenSymbol\n    ? serumMarkets[tokenSymbol.toUpperCase()]\n      ? serumMarkets[tokenSymbol.toUpperCase()].publicKey\n      : undefined\n    : undefined;\n  const isSolAddress = publicKey.equals(owner);\n  const additionalInfo = isExtensionWidth ? undefined : (\n    <>\n      <Typography variant=\"body2\">\n        Token Name: {tokenName ?? 'Unknown'}\n      </Typography>\n      <Typography variant=\"body2\">\n        Token Symbol: {tokenSymbol ?? 'Unknown'}\n      </Typography>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          {!isSolAddress && isAssociatedToken === false && (\n            <div style={{ display: 'flex' }}>\n              This is an auxiliary token account.\n            </div>\n          )}\n          <Typography variant=\"body2\">\n            <Link\n              href={\n                `http://3.18.89.242:3000/account/${publicKey.toBase58()}` + urlSuffix\n              }\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Domiexplorer\n            </Link>\n          </Typography>\n          {market && (\n            <Typography variant=\"body2\">\n              <Link\n                href={`https://dex.projectserum.com/#/market/${market}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Serum\n              </Link>\n            </Typography>\n          )}\n          {swapInfo && swapInfo.coin.erc20Contract && (\n            <Typography variant=\"body2\">\n              <Link\n                href={\n                  `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Ethereum\n              </Link>\n            </Typography>\n          )}\n          {!isSolAddress && (\n            <Typography variant=\"body2\">\n              <Link\n                className={classes.viewDetails}\n                onClick={() => setShowDetails(!showDetails)}\n              >\n                View Details\n              </Link>\n            </Typography>\n          )}\n          {showDetails &&\n            (mint ? (\n              <Typography variant=\"body2\" className={classes.address}>\n                Mint Address: {mint.toBase58()}\n              </Typography>\n            ) : null)}\n          {!isSolAddress && showDetails && (\n            <Typography variant=\"body2\" className={classes.address}>\n              {isAssociatedToken ? 'Associated' : ''} Token Metadata:{' '}\n              {publicKey.toBase58()}\n            </Typography>\n          )}\n        </div>\n        {exportNeedsDisplay && wallet.allowsExport && (\n          <div>\n            <Typography variant=\"body2\">\n              <Link href={'#'} onClick={(e) => setExportAccDialogOpen(true)}>\n                Export\n              </Link>\n            </Typography>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      {wallet.allowsExport && (\n        <ExportAccountDialog\n          onClose={() => setExportAccDialogOpen(false)}\n          open={exportAccDialogOpen}\n        />\n      )}\n      <div className={classes.itemDetails}>\n        <div className={classes.buttonContainer}>\n          {!publicKey.equals(owner) && showTokenInfoDialog ? (\n            <Button\n              variant=\"outlined\"\n              color=\"default\"\n              startIcon={<InfoIcon />}\n              onClick={() => setTokenInfoDialogOpen(true)}\n            >\n              Token Info\n            </Button>\n          ) : null}\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<ReceiveIcon />}\n            onClick={() => setDepositDialogOpen(true)}\n          >\n            Receive\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<SendIcon />}\n            onClick={() => setSendDialogOpen(true)}\n          >\n            Send\n          </Button>\n          {localStorage.getItem('warning-close-account') &&\n          mint &&\n          amount === 0 ? (\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              size=\"small\"\n              startIcon={<DeleteIcon />}\n              onClick={() => setCloseTokenAccountDialogOpen(true)}\n            >\n              Delete\n            </Button>\n          ) : null}\n        </div>\n        {additionalInfo}\n      </div>\n      <SendDialog\n        open={sendDialogOpen}\n        onClose={() => setSendDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <DepositDialog\n        open={depositDialogOpen}\n        onClose={() => setDepositDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n        swapInfo={swapInfo}\n        isAssociatedToken={isAssociatedToken}\n      />\n      <TokenInfoDialog\n        open={tokenInfoDialogOpen}\n        onClose={() => setTokenInfoDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <CloseTokenAccountDialog\n        open={closeTokenAccountDialogOpen}\n        onClose={() => setCloseTokenAccountDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n    </>\n  );\n}\n","/home/pc/Desktop/DWallet/src/components/SignFormContent.js",[],"/home/pc/Desktop/DWallet/src/utils/walletProvider/factory.js",[],"/home/pc/Desktop/DWallet/src/utils/walletProvider/localStorage.js",[],"/home/pc/Desktop/DWallet/src/components/SignTransactionFormContent.js",[],"/home/pc/Desktop/DWallet/src/utils/fetch-loop.ts",[],"/home/pc/Desktop/DWallet/src/components/ConnectionsList.js",[],"/home/pc/Desktop/DWallet/src/utils/notifications.js",[],"/home/pc/Desktop/DWallet/src/utils/walletProvider/ledger.js",[],"/home/pc/Desktop/DWallet/src/components/instructions/TokenInstruction.js",[],"/home/pc/Desktop/DWallet/src/utils/tokens/index.js",[],"/home/pc/Desktop/DWallet/src/utils/diffie-hellman/index.js",[],"/home/pc/Desktop/DWallet/src/components/DomainsList.tsx",[],"/home/pc/Desktop/DWallet/src/utils/walletProvider/ledger-core.js",[],"/home/pc/Desktop/DWallet/src/components/instructions/LabelValue.js",[],"/home/pc/Desktop/DWallet/src/utils/diffie-hellman/ed2curve.js",[],"/home/pc/Desktop/DWallet/src/utils/name-service/index.ts",[],"/home/pc/Desktop/DWallet/src/components/instructions/DexInstruction.js",[],"/home/pc/Desktop/DWallet/src/components/instructions/SystemInstruction.js",[],"/home/pc/Desktop/DWallet/src/components/instructions/StakeInstruction.js",[],"/home/pc/Desktop/DWallet/src/components/instructions/UnknownInstruction.js",[],"/home/pc/Desktop/DWallet/src/components/instructions/NewOrder.js",[],"/home/pc/Desktop/DWallet/src/utils/transactions.ts",[],"/home/pc/Desktop/DWallet/src/components/SwapButton.js",[],"/home/pc/Desktop/DWallet/src/components/MergeAccountsDialog.js",[],"/home/pc/Desktop/DWallet/src/components/EditAccountNameDialog.js",[],"/home/pc/Desktop/DWallet/src/components/TokenIcon.js",[],"/home/pc/Desktop/DWallet/src/components/CloseTokenAccountButton.js",[],"/home/pc/Desktop/DWallet/src/utils/config.js",[],"/home/pc/Desktop/DWallet/src/components/DepositDialog.js",[],"/home/pc/Desktop/DWallet/src/components/SendDialog.js",[],"/home/pc/Desktop/DWallet/src/utils/swap/api.js",[],"/home/pc/Desktop/DWallet/src/utils/markets.ts",["292"],"import { MARKETS } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { MAINNET_URL } from './connection';\n\ninterface Markets {\n  [coin: string]: {\n    publicKey: PublicKey;\n    name: string;\n    deprecated?: boolean;\n  };\n}\n\nexport const serumMarkets = (() => {\n  const m: Markets = {};\n  MARKETS.forEach((market) => {\n    const coin = market.name.split('/')[0];\n    if (m[coin]) {\n      // Only override a market if it's not deprecated\t.\n      if (!m.deprecated) {\n        m[coin] = {\n          publicKey: market.address,\n          name: market.name.split('/').join(''),\n        };\n      }\n    } else {\n      m[coin] = {\n        publicKey: market.address,\n        name: market.name.split('/').join(''),\n      };\n    }\n  });\n  return m;\n})();\n\n// Create a cached API wrapper to avoid rate limits.\nclass PriceStore {\n  cache: {};\n\n  constructor() {\n    this.cache = {};\n  }\n\n  async getPrice(connection, marketName): Promise<number | undefined> {\n    return Promise.resolve(undefined);\n\n    /*\n    return new Promise((resolve, reject) => {\n      if (connection._rpcEndpoint !== MAINNET_URL) {\n        resolve(undefined);\n        return;\n      }\n      if (this.cache[marketName] === undefined) {\n        fetch(`https://serum-api.bonfida.com/orderbooks/${marketName}`).then(\n          (resp) => {\n            resp.json().then((resp) => {\n              if (resp.data.asks === null || resp.data.bids === null) {\n                resolve(undefined);\n              } else if (\n                resp.data.asks.length === 0 &&\n                resp.data.bids.length === 0\n              ) {\n                resolve(undefined);\n              } else if (resp.data.asks.length === 0) {\n                resolve(resp.data.bids[0].price);\n              } else if (resp.data.bids.length === 0) {\n                resolve(resp.data.asks[0].price);\n              } else {\n                const mid =\n                  (resp.data.asks[0].price + resp.data.bids[0].price) / 2.0;\n                this.cache[marketName] = mid;\n                resolve(this.cache[marketName]);\n              }\n            });\n          },\n        );\n      } else {\n        return resolve(this.cache[marketName]);\n      }\n    });\n    */\n  }\n}\n\nexport const priceStore = new PriceStore();\n","/home/pc/Desktop/DWallet/src/utils/region.ts",[],"/home/pc/Desktop/DWallet/src/components/AddTokenDialog.js",[],"/home/pc/Desktop/DWallet/src/components/FtxPay/FtxPayDialog.js",[],"/home/pc/Desktop/DWallet/src/components/TokenInfoDialog.js",[],["293","294"],"/home/pc/Desktop/DWallet/src/utils/swap/eth.js",[],"/home/pc/Desktop/DWallet/src/components/CopyableDisplay.js",[],"/home/pc/Desktop/DWallet/src/components/EthFeeEstimate.tsx",[],{"ruleId":"295","severity":1,"message":"296","line":5,"column":13,"nodeType":"297","messageId":"298","endLine":5,"endColumn":26},{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"295","severity":1,"message":"303","line":29,"column":8,"nodeType":"297","messageId":"298","endLine":29,"endColumn":15},{"ruleId":"295","severity":1,"message":"304","line":35,"column":8,"nodeType":"297","messageId":"298","endLine":35,"endColumn":17},{"ruleId":"295","severity":1,"message":"305","line":36,"column":8,"nodeType":"297","messageId":"298","endLine":36,"endColumn":16},{"ruleId":"295","severity":1,"message":"306","line":40,"column":8,"nodeType":"297","messageId":"298","endLine":40,"endColumn":18},{"ruleId":"295","severity":1,"message":"307","line":62,"column":8,"nodeType":"297","messageId":"298","endLine":62,"endColumn":18},{"ruleId":"295","severity":1,"message":"308","line":63,"column":8,"nodeType":"297","messageId":"298","endLine":63,"endColumn":15},{"ruleId":"295","severity":1,"message":"309","line":64,"column":8,"nodeType":"297","messageId":"298","endLine":64,"endColumn":19},{"ruleId":"295","severity":1,"message":"310","line":115,"column":24,"nodeType":"297","messageId":"298","endLine":115,"endColumn":39},{"ruleId":"295","severity":1,"message":"311","line":116,"column":10,"nodeType":"297","messageId":"298","endLine":116,"endColumn":21},{"ruleId":"295","severity":1,"message":"312","line":116,"column":23,"nodeType":"297","messageId":"298","endLine":116,"endColumn":37},{"ruleId":"295","severity":1,"message":"313","line":122,"column":9,"nodeType":"297","messageId":"298","endLine":122,"endColumn":15},{"ruleId":"314","severity":1,"message":"315","line":3,"column":10,"nodeType":"297","messageId":"298","endLine":3,"endColumn":21},{"ruleId":"299","replacedBy":"316"},{"ruleId":"301","replacedBy":"317"},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["318"],"no-negated-in-lhs",["319"],"'AddIcon' is defined but never used.","'MergeType' is defined but never used.","'SortIcon' is defined but never used.","'ftxPayIcon' is defined but never used.","'SwapButton' is defined but never used.","'DnsIcon' is defined but never used.","'DomainsList' is defined but never used.","'setSortAccounts' is assigned a value but never used.","'showDomains' is assigned a value but never used.","'setShowDomains' is assigned a value but never used.","'region' is assigned a value but never used.","@typescript-eslint/no-unused-vars","'MAINNET_URL' is defined but never used.",["318"],["319"],"no-global-assign","no-unsafe-negation"]