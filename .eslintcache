[{"S:\\DWallet\\src\\index.js":"1","S:\\DWallet\\src\\App.js":"2","S:\\DWallet\\src\\serviceWorker.js":"3","S:\\DWallet\\src\\components\\DialogForm.js":"4","S:\\DWallet\\src\\components\\LoadingIndicator.js":"5","S:\\DWallet\\src\\components\\NavigationFrame.js":"6","S:\\DWallet\\src\\utils\\wallet.js":"7","S:\\DWallet\\src\\utils\\page.js":"8","S:\\DWallet\\src\\utils\\connected-wallets.js":"9","S:\\DWallet\\src\\pages\\WalletPage.js":"10","S:\\DWallet\\src\\pages\\LoginPage.js":"11","S:\\DWallet\\src\\pages\\ConnectionsPage.js":"12","S:\\DWallet\\src\\pages\\PopupPage.js":"13","S:\\DWallet\\src\\utils\\tokens\\names.js":"14","S:\\DWallet\\src\\utils\\utils.ts":"15","S:\\DWallet\\src\\utils\\connection.tsx":"16","S:\\DWallet\\src\\components\\ExportAccountDialog.js":"17","S:\\DWallet\\src\\utils\\clusters.js":"18","S:\\DWallet\\src\\components\\SolanaIcon.js":"19","S:\\DWallet\\src\\components\\DeleteMnemonicDialog.js":"20","S:\\DWallet\\src\\components\\AddAccountDialog.js":"21","S:\\DWallet\\src\\components\\AddHarwareWalletDialog.js":"22","S:\\DWallet\\src\\components\\AddCustomClusterDialog.js":"23","S:\\DWallet\\src\\components\\ConnectionIcon.js":"24","S:\\DWallet\\src\\utils\\tokens\\instructions.js":"25","S:\\DWallet\\src\\utils\\tokens\\data.js":"26","S:\\DWallet\\src\\utils\\wallet-seed.js":"27","S:\\DWallet\\src\\components\\BalancesList.js":"28","S:\\DWallet\\src\\components\\SignFormContent.js":"29","S:\\DWallet\\src\\components\\SignTransactionFormContent.js":"30","S:\\DWallet\\src\\utils\\walletProvider\\factory.js":"31","S:\\DWallet\\src\\utils\\walletProvider\\localStorage.js":"32","S:\\DWallet\\src\\utils\\fetch-loop.ts":"33","S:\\DWallet\\src\\components\\ConnectionsList.js":"34","S:\\DWallet\\src\\utils\\notifications.js":"35","S:\\DWallet\\src\\utils\\walletProvider\\ledger.js":"36","S:\\DWallet\\src\\components\\instructions\\TokenInstruction.js":"37","S:\\DWallet\\src\\utils\\tokens\\index.js":"38","S:\\DWallet\\src\\utils\\diffie-hellman\\index.js":"39","S:\\DWallet\\src\\utils\\walletProvider\\ledger-core.js":"40","S:\\DWallet\\src\\components\\instructions\\LabelValue.js":"41","S:\\DWallet\\src\\utils\\diffie-hellman\\ed2curve.js":"42","S:\\DWallet\\src\\components\\instructions\\SystemInstruction.js":"43","S:\\DWallet\\src\\components\\instructions\\DexInstruction.js":"44","S:\\DWallet\\src\\components\\instructions\\StakeInstruction.js":"45","S:\\DWallet\\src\\components\\instructions\\UnknownInstruction.js":"46","S:\\DWallet\\src\\components\\instructions\\NewOrder.js":"47","S:\\DWallet\\src\\utils\\transactions.ts":"48","S:\\DWallet\\src\\components\\DomainsList.tsx":"49","S:\\DWallet\\src\\components\\SwapButton.js":"50","S:\\DWallet\\src\\components\\MergeAccountsDialog.js":"51","S:\\DWallet\\src\\components\\EditAccountNameDialog.js":"52","S:\\DWallet\\src\\components\\CloseTokenAccountButton.js":"53","S:\\DWallet\\src\\components\\TokenIcon.js":"54","S:\\DWallet\\src\\utils\\config.js":"55","S:\\DWallet\\src\\components\\DepositDialog.js":"56","S:\\DWallet\\src\\components\\SendDialog.js":"57","S:\\DWallet\\src\\components\\AddTokenDialog.js":"58","S:\\DWallet\\src\\components\\TokenInfoDialog.js":"59","S:\\DWallet\\src\\utils\\swap\\api.js":"60","S:\\DWallet\\src\\components\\FtxPay\\FtxPayDialog.js":"61","S:\\DWallet\\src\\utils\\markets.ts":"62","S:\\DWallet\\src\\utils\\region.ts":"63","S:\\DWallet\\src\\components\\CopyableDisplay.js":"64","S:\\DWallet\\src\\utils\\swap\\eth.js":"65","S:\\DWallet\\src\\components\\EthFeeEstimate.tsx":"66","S:\\DWallet\\src\\utils\\name-service\\index.ts":"67"},{"size":724,"mtime":1678189405453,"results":"68","hashOfConfig":"69"},{"size":5815,"mtime":1678194915436,"results":"70","hashOfConfig":"69"},{"size":5244,"mtime":1678187597910,"results":"71","hashOfConfig":"69"},{"size":755,"mtime":1678187597898,"results":"72","hashOfConfig":"69"},{"size":954,"mtime":1678187597901,"results":"73","hashOfConfig":"69"},{"size":14506,"mtime":1678306077619,"results":"74","hashOfConfig":"69"},{"size":14113,"mtime":1678189405458,"results":"75","hashOfConfig":"69"},{"size":400,"mtime":1678187597915,"results":"76","hashOfConfig":"69"},{"size":1006,"mtime":1678187597911,"results":"77","hashOfConfig":"69"},{"size":1028,"mtime":1678187597909,"results":"78","hashOfConfig":"69"},{"size":17510,"mtime":1678300309177,"results":"79","hashOfConfig":"69"},{"size":897,"mtime":1678187597908,"results":"80","hashOfConfig":"69"},{"size":15770,"mtime":1678189405454,"results":"81","hashOfConfig":"69"},{"size":14824,"mtime":1678187597918,"results":"82","hashOfConfig":"69"},{"size":3372,"mtime":1678187597919,"results":"83","hashOfConfig":"69"},{"size":4169,"mtime":1678198672125,"results":"84","hashOfConfig":"69"},{"size":2445,"mtime":1678187597900,"results":"85","hashOfConfig":"69"},{"size":1566,"mtime":1678197476494,"results":"86","hashOfConfig":"69"},{"size":231,"mtime":1678433517619,"results":"87","hashOfConfig":"69"},{"size":2277,"mtime":1678187597898,"results":"88","hashOfConfig":"69"},{"size":2671,"mtime":1678187597894,"results":"89","hashOfConfig":"69"},{"size":6145,"mtime":1678189405446,"results":"90","hashOfConfig":"69"},{"size":1705,"mtime":1678187597894,"results":"91","hashOfConfig":"69"},{"size":836,"mtime":1678187597896,"results":"92","hashOfConfig":"69"},{"size":5411,"mtime":1678187597918,"results":"93","hashOfConfig":"69"},{"size":1010,"mtime":1678187597917,"results":"94","hashOfConfig":"69"},{"size":7070,"mtime":1678187597919,"results":"95","hashOfConfig":"69"},{"size":26293,"mtime":1678197346862,"results":"96","hashOfConfig":"69"},{"size":2923,"mtime":1678187597903,"results":"97","hashOfConfig":"69"},{"size":10727,"mtime":1678189405452,"results":"98","hashOfConfig":"69"},{"size":369,"mtime":1678187597920,"results":"99","hashOfConfig":"69"},{"size":2203,"mtime":1678187597921,"results":"100","hashOfConfig":"69"},{"size":5942,"mtime":1678187597913,"results":"101","hashOfConfig":"69"},{"size":4597,"mtime":1678187597897,"results":"102","hashOfConfig":"69"},{"size":2767,"mtime":1678189405456,"results":"103","hashOfConfig":"69"},{"size":1979,"mtime":1678187597921,"results":"104","hashOfConfig":"69"},{"size":2571,"mtime":1678187597907,"results":"105","hashOfConfig":"69"},{"size":10578,"mtime":1678189405457,"results":"106","hashOfConfig":"69"},{"size":386,"mtime":1678187597913,"results":"107","hashOfConfig":"69"},{"size":4762,"mtime":1678187597920,"results":"108","hashOfConfig":"69"},{"size":525,"mtime":1678187597905,"results":"109","hashOfConfig":"69"},{"size":6439,"mtime":1678187597912,"results":"110","hashOfConfig":"69"},{"size":1712,"mtime":1678187597906,"results":"111","hashOfConfig":"69"},{"size":2339,"mtime":1678187597905,"results":"112","hashOfConfig":"69"},{"size":2373,"mtime":1678187597906,"results":"113","hashOfConfig":"69"},{"size":1387,"mtime":1678187597907,"results":"114","hashOfConfig":"69"},{"size":2050,"mtime":1678187597906,"results":"115","hashOfConfig":"69"},{"size":14263,"mtime":1678187597919,"results":"116","hashOfConfig":"69"},{"size":8657,"mtime":1678187597899,"results":"117","hashOfConfig":"69"},{"size":4637,"mtime":1678187597904,"results":"118","hashOfConfig":"69"},{"size":10561,"mtime":1678187597901,"results":"119","hashOfConfig":"69"},{"size":1366,"mtime":1678187597899,"results":"120","hashOfConfig":"69"},{"size":1779,"mtime":1678187597896,"results":"121","hashOfConfig":"69"},{"size":621,"mtime":1678197122110,"results":"122","hashOfConfig":"69"},{"size":130,"mtime":1678187597911,"results":"123","hashOfConfig":"69"},{"size":12466,"mtime":1678189405449,"results":"124","hashOfConfig":"69"},{"size":25776,"mtime":1678189405451,"results":"125","hashOfConfig":"69"},{"size":9368,"mtime":1678189405447,"results":"126","hashOfConfig":"69"},{"size":2327,"mtime":1678189405452,"results":"127","hashOfConfig":"69"},{"size":1311,"mtime":1678187597916,"results":"128","hashOfConfig":"69"},{"size":4899,"mtime":1678300320523,"results":"129","hashOfConfig":"69"},{"size":2357,"mtime":1678187597914,"results":"130","hashOfConfig":"69"},{"size":269,"mtime":1678187597915,"results":"131","hashOfConfig":"69"},{"size":2493,"mtime":1678187597897,"results":"132","hashOfConfig":"69"},{"size":7053,"mtime":1678300385622,"results":"133","hashOfConfig":"69"},{"size":2159,"mtime":1678187597899,"results":"134","hashOfConfig":"69"},{"size":3726,"mtime":1678189405456,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},"12g3h1x",{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"168"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"139"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"139"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"139"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"168"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"139"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},"S:\\DWallet\\src\\index.js",["280"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst renderReactDom = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n    );\r\n  };\r\n\r\nif (window.cordova) {\r\n  document.addEventListener('deviceready', () => {\r\n    renderReactDom();\r\n  }, false);\r\n} else {\r\n  renderReactDom();\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n",["281","282"],"S:\\DWallet\\src\\App.js",[],"S:\\DWallet\\src\\serviceWorker.js",[],"S:\\DWallet\\src\\components\\DialogForm.js",[],"S:\\DWallet\\src\\components\\LoadingIndicator.js",[],"S:\\DWallet\\src\\components\\NavigationFrame.js",[],"S:\\DWallet\\src\\utils\\wallet.js",[],"S:\\DWallet\\src\\utils\\page.js",[],"S:\\DWallet\\src\\utils\\connected-wallets.js",[],"S:\\DWallet\\src\\pages\\WalletPage.js",[],"S:\\DWallet\\src\\pages\\LoginPage.js",[],"S:\\DWallet\\src\\pages\\ConnectionsPage.js",[],"S:\\DWallet\\src\\pages\\PopupPage.js",[],"S:\\DWallet\\src\\utils\\tokens\\names.js",[],"S:\\DWallet\\src\\utils\\utils.ts",[],["283","284"],"S:\\DWallet\\src\\utils\\connection.tsx",["285"],"import React, { useContext, useEffect, useMemo } from 'react';\r\nimport {\r\n  AccountInfo,\r\n  clusterApiUrl,\r\n  Connection,\r\n  PublicKey,\r\n} from '@solana/web3.js';\r\nimport tuple from 'immutable-tuple';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport { useLocalStorageState, useRefEqual } from './utils';\r\nimport { refreshCache, setCache, useAsyncData } from './fetch-loop';\r\n\r\nconst ConnectionContext = React.createContext<{\r\n  endpoint: string;\r\n  setEndpoint: (string) => void;\r\n  connection: Connection;\r\n} | null>(null);\r\n\r\nexport const MAINNET_URL = 'https://mainnet.domichain.io';\r\n// No backup url for now. Leave the variable to not break wallets that\r\n// have saved the url in their local storage, previously.\r\nexport const MAINNET_BACKUP_URL = 'https://mainnet.domichain.io';\r\nexport function ConnectionProvider({ children }) {\r\n  const [endpoint, setEndpoint] = useLocalStorageState(\r\n    'connectionEndpoint',\r\n    MAINNET_URL,\r\n  );\r\n\r\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [\r\n    endpoint,\r\n  ]);\r\n\r\n  return (\r\n    <ConnectionContext.Provider value={{ endpoint, setEndpoint, connection }}>\r\n      {children}\r\n    </ConnectionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useConnection(): Connection {\r\n  let context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return context.connection;\r\n}\r\n\r\nexport function useConnectionConfig() {\r\n  let context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return { endpoint: context.endpoint, setEndpoint: context.setEndpoint };\r\n}\r\n\r\nexport function useIsProdNetwork() {\r\n  let context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return context.endpoint === MAINNET_URL || context.endpoint === MAINNET_BACKUP_URL;\r\n}\r\n\r\nexport function useSolanaExplorerUrlSuffix() {\r\n  const context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  const endpoint = context.endpoint;\r\n  if (endpoint === 'https://api.devnet.domichain.io') {\r\n    return '?cluster=devnet';\r\n  } else if (endpoint === 'https://api.testnet.domichain.io') {\r\n    return '?cluster=testnet';\r\n  }\r\n  return '';\r\n}\r\n\r\nexport function useAccountInfo(publicKey?: PublicKey) {\r\n  const connection = useConnection();\r\n  const cacheKey = tuple(connection, publicKey?.toBase58());\r\n  const [accountInfo, loaded] = useAsyncData(\r\n    async () => (publicKey ? connection.getAccountInfo(publicKey) : null),\r\n    cacheKey,\r\n  );\r\n  useEffect(() => {\r\n    if (!publicKey) {\r\n      return;\r\n    }\r\n    let previousInfo: AccountInfo<Buffer> | null = null;\r\n    const id = connection.onAccountChange(publicKey, (info) => {\r\n      if (\r\n        !previousInfo ||\r\n        !previousInfo.data.equals(info.data) ||\r\n        previousInfo.lamports !== info.lamports\r\n      ) {\r\n        previousInfo = info;\r\n        setCache(cacheKey, info);\r\n      }\r\n    });\r\n    return () => {\r\n      connection.removeAccountChangeListener(id);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [connection, publicKey?.toBase58() ?? '', cacheKey]);\r\n  return [\r\n    useRefEqual(\r\n      accountInfo,\r\n      (oldInfo, newInfo) =>\r\n        !!oldInfo &&\r\n        !!newInfo &&\r\n        oldInfo.data.equals(newInfo.data) &&\r\n        oldInfo.lamports === newInfo.lamports,\r\n    ),\r\n    loaded,\r\n  ];\r\n}\r\n\r\nexport function refreshAccountInfo(connection, publicKey, clearCache = false) {\r\n  const cacheKey = tuple(connection, publicKey.toBase58());\r\n  refreshCache(cacheKey, clearCache);\r\n}\r\n\r\nexport function setInitialAccountInfo(connection, publicKey, accountInfo) {\r\n  const cacheKey = tuple(connection, publicKey.toBase58());\r\n  setCache(cacheKey, accountInfo, { initializeOnly: true });\r\n}\r\n\r\nexport async function getMultipleSolanaAccounts(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n): Promise<\r\n  Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\r\n> {\r\n\treturn anchor.utils.rpc.getMultipleAccounts(connection, publicKeys);\r\n}\r\n","S:\\DWallet\\src\\components\\ExportAccountDialog.js",[],"S:\\DWallet\\src\\utils\\clusters.js",["286"],"import { clusterApiUrl } from '@solana/web3.js';\r\nimport { MAINNET_URL, MAINNET_BACKUP_URL } from '../utils/connection';\r\n\r\nexport const CLUSTERS = [\r\n  {\r\n    name: 'mainnet-beta',\r\n    apiUrl: MAINNET_URL,\r\n    label: 'Mainnet Beta',\r\n    clusterSlug: 'mainnet-beta',\r\n  },\r\n  {\r\n    name: 'mainnet-beta-backup',\r\n    apiUrl: MAINNET_BACKUP_URL,\r\n      label: 'Mainnet Beta Backup',\r\n    clusterSlug: 'mainnet-beta',\r\n  },\r\n  {\r\n    name: 'devnet',\r\n    apiUrl: 'https://api.devnet.domichain.io',\r\n    label: 'Devnet',\r\n    clusterSlug: 'devnet',\r\n  },\r\n  {\r\n    name: 'testnet',\r\n    apiUrl: 'https://api.testnet.domichain.io',\r\n    label: 'Testnet',\r\n    clusterSlug: 'testnet',\r\n  },\r\n  {\r\n    name: 'localnet',\r\n    apiUrl: 'http://localhost:8899',\r\n    label: null,\r\n    clusterSlug: 'localnet',\r\n  }\r\n];\r\n\r\nexport function clusterForEndpoint(endpoint) {\r\n  return getClusters().find(({ apiUrl }) => apiUrl === endpoint);\r\n}\r\n\r\nconst customClusterConfigKey = \"customClusterConfig\";\r\n\r\nexport function addCustomCluster(name, apiUrl) {\r\n  const stringifiedConfig = JSON.stringify({name: name, label: name, apiUrl: apiUrl, clusterSlug: null});\r\n  localStorage.setItem(customClusterConfigKey, stringifiedConfig);\r\n}\r\n\r\nexport function customClusterExists() {\r\n  return !!localStorage.getItem(customClusterConfigKey)\r\n}\r\n\r\nexport function getClusters() {\r\n  const stringifiedConfig = localStorage.getItem(customClusterConfigKey);\r\n  const config = stringifiedConfig ? JSON.parse(stringifiedConfig) : null;\r\n  return  config ? [...CLUSTERS, config] : CLUSTERS;\r\n}\r\n","S:\\DWallet\\src\\components\\SolanaIcon.js",["287","288"],"import React from 'react';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\n\r\nexport default function SolanaIcon() {\r\n  return (\r\n    <img src='https://i.imgur.com/oqp8Cbo.png' style={{ width: 50, height: 50 }} ></img>\r\n  );\r\n}\r\n","S:\\DWallet\\src\\components\\DeleteMnemonicDialog.js",[],"S:\\DWallet\\src\\components\\AddAccountDialog.js",[],"S:\\DWallet\\src\\components\\AddHarwareWalletDialog.js",[],"S:\\DWallet\\src\\components\\AddCustomClusterDialog.js",[],"S:\\DWallet\\src\\components\\ConnectionIcon.js",[],"S:\\DWallet\\src\\utils\\tokens\\instructions.js",[],"S:\\DWallet\\src\\utils\\tokens\\data.js",[],"S:\\DWallet\\src\\utils\\wallet-seed.js",[],"S:\\DWallet\\src\\components\\BalancesList.js",["289","290","291","292","293","294","295","296","297","298","299","300"],"import React, { useState, useMemo, useCallback, useEffect } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  refreshWalletPublicKeys,\r\n  useBalanceInfo,\r\n  useWallet,\r\n  useWalletPublicKeys,\r\n  useWalletSelector,\r\n} from '../utils/wallet';\r\nimport { findAssociatedTokenAddress } from '../utils/tokens';\r\nimport LoadingIndicator from './LoadingIndicator';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Typography } from '@material-ui/core';\r\nimport TokenInfoDialog from './TokenInfoDialog';\r\nimport FtxPayDialog from './FtxPay/FtxPayDialog';\r\nimport Link from '@material-ui/core/Link';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { abbreviateAddress, useIsExtensionWidth } from '../utils/utils';\r\nimport Button from '@material-ui/core/Button';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MergeType from '@material-ui/icons/MergeType';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddTokenDialog from './AddTokenDialog';\r\nimport ExportAccountDialog from './ExportAccountDialog';\r\nimport ftxPayIcon from './FtxPay/icon.png';\r\nimport SendDialog from './SendDialog';\r\nimport DepositDialog from './DepositDialog';\r\nimport {\r\n  useIsProdNetwork,\r\n  refreshAccountInfo,\r\n  useSolanaExplorerUrlSuffix,\r\n} from '../utils/connection';\r\nimport { useRegion } from '../utils/region';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { serumMarkets, priceStore } from '../utils/markets';\r\nimport { swapApiRequest } from '../utils/swap/api';\r\nimport { showSwapAddress } from '../utils/config';\r\nimport { useAsyncData } from '../utils/fetch-loop';\r\nimport { showTokenInfoDialog } from '../utils/config';\r\nimport { useConnection } from '../utils/connection';\r\nimport { shortenAddress } from '../utils/utils';\r\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport TokenIcon from './TokenIcon';\r\nimport EditAccountNameDialog from './EditAccountNameDialog';\r\nimport MergeAccountsDialog from './MergeAccountsDialog';\r\nimport SwapButton from './SwapButton';\r\nimport DnsIcon from '@material-ui/icons/Dns';\r\nimport DomainsList from './DomainsList';\r\n\r\nconst balanceFormat = new Intl.NumberFormat(undefined, {\r\n  minimumFractionDigits: 4,\r\n  maximumFractionDigits: 4,\r\n  useGrouping: true,\r\n});\r\n\r\nconst SortAccounts = {\r\n  None: 0,\r\n  Ascending: 1,\r\n  Descending: 2,\r\n};\r\n\r\n// Aggregated $USD values of all child BalanceListItems child components.\r\n//\r\n// Values:\r\n// * undefined => loading.\r\n// * null => no market exists.\r\n// * float => done.\r\n//\r\n// For a given set of publicKeys, we know all the USD values have been loaded when\r\n// all of their values in this object are not `undefined`.\r\nconst usdValues = {};\r\n\r\n// Calculating associated token addresses is an asynchronous operation, so we cache\r\n// the values so that we can quickly render components using them. This prevents\r\n// flickering for the associated token fingerprint icon.\r\nconst associatedTokensCache = {};\r\n\r\nconst numberFormat = new Intl.NumberFormat('en-US', {\r\n  style: 'currency',\r\n  currency: 'USD',\r\n});\r\n\r\nfunction fairsIsLoaded(publicKeys) {\r\n  return (\r\n    publicKeys.filter((pk) => usdValues[pk.toString()] !== undefined).length ===\r\n    publicKeys.length\r\n  );\r\n}\r\n\r\nexport default function BalancesList() {\r\n  const wallet = useWallet();\r\n  const [publicKeys, loaded] = useWalletPublicKeys();\r\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\r\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(\r\n    false,\r\n  );\r\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\r\n  const [showFtxPayDialog, setShowFtxPayDialog] = useState(false);\r\n  const [sortAccounts, setSortAccounts] = useState(SortAccounts.None);\r\n  const [showDomains, setShowDomains] = useState(false);\r\n  const { accounts, setAccountName } = useWalletSelector();\r\n  const [isCopied, setIsCopied] = useState(false);\r\n  const isExtensionWidth = useIsExtensionWidth();\r\n  // Dummy var to force rerenders on demand.\r\n  const [, setForceUpdate] = useState(false);\r\n  const region = useRegion();\r\n  const selectedAccount = accounts.find((a) => a.isSelected);\r\n  const allTokensLoaded = loaded && fairsIsLoaded(publicKeys);\r\n  let sortedPublicKeys = publicKeys;\r\n  if (allTokensLoaded && sortAccounts !== SortAccounts.None) {\r\n    sortedPublicKeys = [...publicKeys];\r\n    sortedPublicKeys.sort((a, b) => {\r\n      const aVal = usdValues[a.toString()];\r\n      const bVal = usdValues[b.toString()];\r\n\r\n      a = aVal === undefined || aVal === null ? -1 : aVal;\r\n      b = bVal === undefined || bVal === null ? -1 : bVal;\r\n      if (sortAccounts === SortAccounts.Descending) {\r\n        if (a < b) {\r\n          return -1;\r\n        } else if (a > b) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      } else {\r\n        if (b < a) {\r\n          return -1;\r\n        } else if (b > a) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      }\r\n    });\r\n  }\r\n  const totalUsdValue = publicKeys\r\n    .filter((pk) => usdValues[pk.toString()])\r\n    .map((pk) => usdValues[pk.toString()])\r\n    .reduce((a, b) => a + b, 0.0);\r\n\r\n  // Memoized callback and component for the `BalanceListItems`.\r\n  //\r\n  // The `BalancesList` fetches data, e.g., fairs for tokens using React hooks\r\n  // in each of the child `BalanceListItem` components. However, we want the\r\n  // parent component, to aggregate all of this data together, for example,\r\n  // to show the cumulative USD amount in the wallet.\r\n  //\r\n  // To achieve this, we need to pass a callback from the parent to the chlid,\r\n  // so that the parent can collect the results of all the async network requests.\r\n  // However, this can cause a render loop, since invoking the callback can cause\r\n  // the parent to rerender, which causese the child to rerender, which causes\r\n  // the callback to be invoked.\r\n  //\r\n  // To solve this, we memoize all the `BalanceListItem` children components.\r\n  const setUsdValuesCallback = useCallback(\r\n    (publicKey, usdValue) => {\r\n      if (usdValues[publicKey.toString()] !== usdValue) {\r\n        usdValues[publicKey.toString()] = usdValue;\r\n        if (fairsIsLoaded(publicKeys)) {\r\n          setForceUpdate((forceUpdate) => !forceUpdate);\r\n        }\r\n      }\r\n    },\r\n    [publicKeys],\r\n  );\r\n  const balanceListItemsMemo = useMemo(() => {\r\n    return sortedPublicKeys.map((pk) => {\r\n      return React.memo((props) => {\r\n        return (\r\n          <BalanceListItem\r\n            key={pk.toString()}\r\n            publicKey={pk}\r\n            setUsdValue={setUsdValuesCallback}\r\n          />\r\n        );\r\n      });\r\n    });\r\n  }, [sortedPublicKeys, setUsdValuesCallback]);\r\n\r\n  const iconSize = isExtensionWidth ? 'small' : 'medium';\r\n\r\n  return (\r\n    <Paper>\r\n      <AppBar position=\"static\" color=\"default\" elevation={1}>\r\n        <Toolbar>\r\n          <CopyToClipboard\r\n            text={selectedAccount && selectedAccount.address.toBase58()}\r\n            onCopy={() => {\r\n              setIsCopied(true);\r\n              setTimeout(() => {\r\n                setIsCopied(false);\r\n              }, 1000);\r\n            }}\r\n          >\r\n            <Tooltip\r\n              title={\r\n                <Typography>\r\n                  {isCopied ? 'Copied' : 'Copy to clipboard'}\r\n                </Typography>\r\n              }\r\n              style={{ fontSize: '10rem' }}\r\n            >\r\n              <Typography\r\n                variant=\"h6\"\r\n                style={{\r\n                  flexGrow: 1,\r\n                  fontSize: isExtensionWidth && '1rem',\r\n                  cursor: 'pointer',\r\n                }}\r\n                hover={true}\r\n                component=\"h2\"\r\n              >\r\n                {selectedAccount && selectedAccount.name}\r\n                {isExtensionWidth\r\n                  ? ''\r\n                  : ` (${\r\n                      selectedAccount &&\r\n                      shortenAddress(selectedAccount.address.toBase58())\r\n                    })`}{' '}\r\n                {/* {allTokensLoaded && ( */}\r\n                  {/* <>({numberFormat.format(totalUsdValue.toFixed(2))})</> */}\r\n                {/* )} */}\r\n              </Typography>\r\n            </Tooltip>\r\n          </CopyToClipboard>\r\n          {selectedAccount &&\r\n            selectedAccount.name !== 'Main account' &&\r\n            selectedAccount.name !== 'Hardware wallet' && (\r\n              <Tooltip title=\"Edit Account Name\" arrow>\r\n                <IconButton\r\n                  size={iconSize}\r\n                  onClick={() => setShowEditAccountNameDialog(true)}\r\n                >\r\n                  <EditIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            )}\r\n          {/* <Tooltip title=\"Deposit via FTX Pay\" arrow>\r\n            <IconButton\r\n              size={iconSize}\r\n              onClick={() => setShowFtxPayDialog(true)}\r\n            >\r\n              <img\r\n                title={'FTX Pay'}\r\n                alt={'FTX Pay'}\r\n                style={{\r\n                  width: 20,\r\n                  height: 20,\r\n                }}\r\n                src={ftxPayIcon}\r\n              />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"See your domains\" arrow>\r\n            <IconButton size={iconSize} onClick={() => setShowDomains(true)}>\r\n              <DnsIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <DomainsList open={showDomains} setOpen={setShowDomains} />\r\n          {region.result && !region.result.isRestricted && <SwapButton size={iconSize} />}\r\n          <Tooltip title=\"Migrate Tokens\" arrow>\r\n            <IconButton\r\n              size={iconSize}\r\n              onClick={() => setShowMergeAccounts(true)}\r\n            >\r\n              <MergeType />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Add Token\" arrow>\r\n            <IconButton\r\n              size={iconSize}\r\n              onClick={() => setShowAddTokenDialog(true)}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Sort Tokens\" arrow>\r\n            <IconButton\r\n              size={iconSize}\r\n              onClick={() => {\r\n                switch (sortAccounts) {\r\n                  case SortAccounts.None:\r\n                    setSortAccounts(SortAccounts.Ascending);\r\n                    return;\r\n                  case SortAccounts.Ascending:\r\n                    setSortAccounts(SortAccounts.Descending);\r\n                    return;\r\n                  case SortAccounts.Descending:\r\n                    setSortAccounts(SortAccounts.None);\r\n                    return;\r\n                  default:\r\n                    console.error('invalid sort type', sortAccounts);\r\n                }\r\n              }}\r\n            >\r\n              <SortIcon />\r\n            </IconButton>\r\n          </Tooltip> */}\r\n          <Tooltip title=\"Refresh\" arrow>\r\n            <IconButton\r\n              size={iconSize}\r\n              onClick={() => {\r\n                refreshWalletPublicKeys(wallet);\r\n                publicKeys.map((publicKey) =>\r\n                  refreshAccountInfo(wallet.connection, publicKey, true),\r\n                );\r\n              }}\r\n              style={{ marginRight: -12 }}\r\n            >\r\n              <RefreshIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <List disablePadding>\r\n        {balanceListItemsMemo.map((Memoized) => (\r\n          <Memoized />\r\n        ))}\r\n        {loaded ? null : <LoadingIndicator />}\r\n      </List>\r\n      <AddTokenDialog\r\n        open={showAddTokenDialog}\r\n        onClose={() => setShowAddTokenDialog(false)}\r\n      />\r\n      <FtxPayDialog\r\n        open={showFtxPayDialog}\r\n        publicKeys={publicKeys}\r\n        onClose={() => setShowFtxPayDialog(false)}\r\n      />\r\n      <EditAccountNameDialog\r\n        open={showEditAccountNameDialog}\r\n        onClose={() => setShowEditAccountNameDialog(false)}\r\n        oldName={selectedAccount ? selectedAccount.name : ''}\r\n        onEdit={(name) => {\r\n          setAccountName(selectedAccount.selector, name);\r\n          setShowEditAccountNameDialog(false);\r\n        }}\r\n      />\r\n      <MergeAccountsDialog\r\n        open={showMergeAccounts}\r\n        onClose={() => setShowMergeAccounts(false)}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  address: {\r\n    textOverflow: 'ellipsis',\r\n    overflowX: 'hidden',\r\n  },\r\n  itemDetails: {\r\n    marginLeft: theme.spacing(3),\r\n    marginRight: theme.spacing(3),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  buttonContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  viewDetails: {\r\n    '&:hover': {\r\n      cursor: 'pointer',\r\n    },\r\n  },\r\n}));\r\n\r\nexport function BalanceListItem({ publicKey, expandable, setUsdValue }) {\r\n  const wallet = useWallet();\r\n  const balanceInfo = useBalanceInfo(publicKey);\r\n  const classes = useStyles();\r\n  const connection = useConnection();\r\n  const [open, setOpen] = useState(false);\r\n  const isExtensionWidth = useIsExtensionWidth();\r\n  const [, setForceUpdate] = useState(false);\r\n  // Valid states:\r\n  //   * undefined => loading.\r\n  //   * null => not found.\r\n  //   * else => price is loaded.\r\n  const [price, setPrice] = useState(undefined);\r\n  useEffect(() => {\r\n    if (balanceInfo) {\r\n      if (balanceInfo.tokenSymbol) {\r\n        const coin = balanceInfo.tokenSymbol.toUpperCase();\r\n        // Don't fetch USD stable coins. Mark to 1 USD.\r\n        if (coin === 'USDT' || coin === 'USDC') {\r\n          setPrice(1);\r\n        }\r\n        // A Serum market exists. Fetch the price.\r\n        else if (serumMarkets[coin]) {\r\n          let m = serumMarkets[coin];\r\n          priceStore\r\n            .getPrice(connection, m.name)\r\n            .then((price) => {\r\n              setPrice(price);\r\n            })\r\n            .catch((err) => {\r\n              console.error(err);\r\n              setPrice(null);\r\n            });\r\n        }\r\n        // No Serum market exists.\r\n        else {\r\n          setPrice(null);\r\n        }\r\n      }\r\n      // No token symbol so don't fetch market data.\r\n      else {\r\n        setPrice(null);\r\n      }\r\n    }\r\n  }, [price, balanceInfo, connection]);\r\n\r\n  expandable = expandable === undefined ? true : expandable;\r\n\r\n  if (!balanceInfo) {\r\n    return <LoadingIndicator delay={0} />;\r\n  }\r\n\r\n  let {\r\n    amount,\r\n    decimals,\r\n    mint,\r\n    tokenName,\r\n    tokenSymbol,\r\n    tokenLogoUri,\r\n  } = balanceInfo;\r\n  tokenName = tokenName ?? abbreviateAddress(mint);\r\n  let displayName;\r\n  if (isExtensionWidth) {\r\n    displayName = tokenSymbol ?? tokenName;\r\n  } else {\r\n    displayName = tokenName + (tokenSymbol ? ` (${tokenSymbol})` : '');\r\n  }\r\n\r\n  // Fetch and cache the associated token address.\r\n  if (wallet && wallet.publicKey && mint) {\r\n    if (\r\n      associatedTokensCache[wallet.publicKey.toString()] === undefined ||\r\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()] ===\r\n        undefined\r\n    ) {\r\n      findAssociatedTokenAddress(wallet.publicKey, mint).then((assocTok) => {\r\n        let walletAccounts = Object.assign(\r\n          {},\r\n          associatedTokensCache[wallet.publicKey.toString()],\r\n        );\r\n        walletAccounts[mint.toString()] = assocTok;\r\n        associatedTokensCache[wallet.publicKey.toString()] = walletAccounts;\r\n        if (assocTok.equals(publicKey)) {\r\n          // Force a rerender now that we've cached the value.\r\n          setForceUpdate((forceUpdate) => !forceUpdate);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // undefined => not loaded.\r\n  let isAssociatedToken = mint ? undefined : false;\r\n  if (\r\n    wallet &&\r\n    wallet.publicKey &&\r\n    mint &&\r\n    associatedTokensCache[wallet.publicKey.toString()]\r\n  ) {\r\n    let acc =\r\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()];\r\n    if (acc) {\r\n      if (acc.equals(publicKey)) {\r\n        isAssociatedToken = true;\r\n      } else {\r\n        isAssociatedToken = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  const subtitle =\r\n    isExtensionWidth || !publicKey.equals(balanceInfo.owner) ? undefined : (\r\n      <div style={{ display: 'flex', height: '20px', overflow: 'hidden' }}>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexDirection: 'column',\r\n          }}\r\n        >\r\n          {publicKey.toBase58()}\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  const usdValue =\r\n    price === undefined // Not yet loaded.\r\n      ? undefined\r\n      : price === null // Loaded and empty.\r\n      ? null\r\n      : ((amount / Math.pow(10, decimals)) * price).toFixed(2); // Loaded.\r\n  if (setUsdValue && usdValue !== undefined) {\r\n    setUsdValue(publicKey, usdValue === null ? null : parseFloat(usdValue));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ListItem button onClick={() => expandable && setOpen((open) => !open)}>\r\n        <ListItemIcon>\r\n          <TokenIcon\r\n            mint={mint}\r\n            tokenName={tokenName}\r\n            url={tokenLogoUri}\r\n            size={28}\r\n          />\r\n        </ListItemIcon>\r\n        <div style={{ display: 'flex', flex: 1 }}>\r\n          <ListItemText\r\n            primary={\r\n              <>\r\n                {balanceFormat.format(amount / Math.pow(10, decimals))}{' '}\r\n                {displayName}\r\n              </>\r\n            }\r\n            secondary={subtitle}\r\n            secondaryTypographyProps={{ className: classes.address }}\r\n          />\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              flexDirection: 'column',\r\n            }}\r\n          >\r\n            {price && (\r\n              <Typography color=\"textSecondary\">\r\n                {numberFormat.format(usdValue)}\r\n              </Typography>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {expandable ? open ? <ExpandLess /> : <ExpandMore /> : <></>}\r\n      </ListItem>\r\n      {expandable && (\r\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n          <BalanceListItemDetails\r\n            isAssociatedToken={isAssociatedToken}\r\n            publicKey={publicKey}\r\n            serumMarkets={serumMarkets}\r\n            balanceInfo={balanceInfo}\r\n          />\r\n        </Collapse>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction BalanceListItemDetails({\r\n  publicKey,\r\n  serumMarkets,\r\n  balanceInfo,\r\n  isAssociatedToken,\r\n}) {\r\n  const urlSuffix = useSolanaExplorerUrlSuffix();\r\n  const classes = useStyles();\r\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\r\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\r\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\r\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\r\n  const [\r\n    closeTokenAccountDialogOpen,\r\n    setCloseTokenAccountDialogOpen,\r\n  ] = useState(false);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n  const wallet = useWallet();\r\n  const isProdNetwork = useIsProdNetwork();\r\n  const [swapInfo] = useAsyncData(async () => {\r\n    if (!showSwapAddress || !isProdNetwork) {\r\n      return null;\r\n    }\r\n    return await swapApiRequest(\r\n      'POST',\r\n      'swap_to',\r\n      {\r\n        blockchain: 'domi',\r\n        coin: balanceInfo.mint?.toBase58(),\r\n        address: publicKey.toBase58(),\r\n      },\r\n      { ignoreUserErrors: true },\r\n    );\r\n  }, [\r\n    'swapInfo',\r\n    isProdNetwork,\r\n    balanceInfo.mint?.toBase58(),\r\n    publicKey.toBase58(),\r\n  ]);\r\n  const isExtensionWidth = useIsExtensionWidth();\r\n\r\n  if (!balanceInfo) {\r\n    return <LoadingIndicator delay={0} />;\r\n  }\r\n\r\n  let { mint, tokenName, tokenSymbol, owner, amount } = balanceInfo;\r\n\r\n  // Only show the export UI for the native DOMI coin.\r\n  const exportNeedsDisplay =\r\n    mint === null && tokenName === 'DOMI' && tokenSymbol === 'DOMI';\r\n\r\n  const market = tokenSymbol\r\n    ? serumMarkets[tokenSymbol.toUpperCase()]\r\n      ? serumMarkets[tokenSymbol.toUpperCase()].publicKey\r\n      : undefined\r\n    : undefined;\r\n  const isSolAddress = publicKey.equals(owner);\r\n  const additionalInfo = isExtensionWidth ? undefined : (\r\n    <>\r\n      <Typography variant=\"body2\">\r\n        Token Name: {tokenName ?? 'Unknown'}\r\n      </Typography>\r\n      <Typography variant=\"body2\">\r\n        Token Symbol: {tokenSymbol ?? 'Unknown'}\r\n      </Typography>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n        <div>\r\n          {!isSolAddress && isAssociatedToken === false && (\r\n            <div style={{ display: 'flex' }}>\r\n              This is an auxiliary token account.\r\n            </div>\r\n          )}\r\n          <Typography variant=\"body2\">\r\n            <Link\r\n              href={\r\n                `http://3.18.89.242:3000/account/${publicKey.toBase58()}` + urlSuffix\r\n              }\r\n              target=\"_blank\"\r\n              rel=\"noopener\"\r\n            >\r\n              View on Domiexplorer\r\n            </Link>\r\n          </Typography>\r\n          {market && (\r\n            <Typography variant=\"body2\">\r\n              <Link\r\n                href={`https://dex.projectserum.com/#/market/${market}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener\"\r\n              >\r\n                View on Serum\r\n              </Link>\r\n            </Typography>\r\n          )}\r\n          {swapInfo && swapInfo.coin.erc20Contract && (\r\n            <Typography variant=\"body2\">\r\n              <Link\r\n                href={\r\n                  `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` +\r\n                  urlSuffix\r\n                }\r\n                target=\"_blank\"\r\n                rel=\"noopener\"\r\n              >\r\n                View on Ethereum\r\n              </Link>\r\n            </Typography>\r\n          )}\r\n          {!isSolAddress && (\r\n            <Typography variant=\"body2\">\r\n              <Link\r\n                className={classes.viewDetails}\r\n                onClick={() => setShowDetails(!showDetails)}\r\n              >\r\n                View Details\r\n              </Link>\r\n            </Typography>\r\n          )}\r\n          {showDetails &&\r\n            (mint ? (\r\n              <Typography variant=\"body2\" className={classes.address}>\r\n                Mint Address: {mint.toBase58()}\r\n              </Typography>\r\n            ) : null)}\r\n          {!isSolAddress && showDetails && (\r\n            <Typography variant=\"body2\" className={classes.address}>\r\n              {isAssociatedToken ? 'Associated' : ''} Token Metadata:{' '}\r\n              {publicKey.toBase58()}\r\n            </Typography>\r\n          )}\r\n        </div>\r\n        {exportNeedsDisplay && wallet.allowsExport && (\r\n          <div>\r\n            <Typography variant=\"body2\">\r\n              <Link href={'#'} onClick={(e) => setExportAccDialogOpen(true)}>\r\n                Export\r\n              </Link>\r\n            </Typography>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {wallet.allowsExport && (\r\n        <ExportAccountDialog\r\n          onClose={() => setExportAccDialogOpen(false)}\r\n          open={exportAccDialogOpen}\r\n        />\r\n      )}\r\n      <div className={classes.itemDetails}>\r\n        <div className={classes.buttonContainer}>\r\n          {!publicKey.equals(owner) && showTokenInfoDialog ? (\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"default\"\r\n              startIcon={<InfoIcon />}\r\n              onClick={() => setTokenInfoDialogOpen(true)}\r\n            >\r\n              Token Info\r\n            </Button>\r\n          ) : null}\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            startIcon={<ReceiveIcon />}\r\n            onClick={() => setDepositDialogOpen(true)}\r\n          >\r\n            Receive\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            startIcon={<SendIcon />}\r\n            onClick={() => setSendDialogOpen(true)}\r\n          >\r\n            Send\r\n          </Button>\r\n          {localStorage.getItem('warning-close-account') &&\r\n          mint &&\r\n          amount === 0 ? (\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              size=\"small\"\r\n              startIcon={<DeleteIcon />}\r\n              onClick={() => setCloseTokenAccountDialogOpen(true)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          ) : null}\r\n        </div>\r\n        {additionalInfo}\r\n      </div>\r\n      <SendDialog\r\n        open={sendDialogOpen}\r\n        onClose={() => setSendDialogOpen(false)}\r\n        balanceInfo={balanceInfo}\r\n        publicKey={publicKey}\r\n      />\r\n      <DepositDialog\r\n        open={depositDialogOpen}\r\n        onClose={() => setDepositDialogOpen(false)}\r\n        balanceInfo={balanceInfo}\r\n        publicKey={publicKey}\r\n        swapInfo={swapInfo}\r\n        isAssociatedToken={isAssociatedToken}\r\n      />\r\n      <TokenInfoDialog\r\n        open={tokenInfoDialogOpen}\r\n        onClose={() => setTokenInfoDialogOpen(false)}\r\n        balanceInfo={balanceInfo}\r\n        publicKey={publicKey}\r\n      />\r\n      <CloseTokenAccountDialog\r\n        open={closeTokenAccountDialogOpen}\r\n        onClose={() => setCloseTokenAccountDialogOpen(false)}\r\n        balanceInfo={balanceInfo}\r\n        publicKey={publicKey}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","S:\\DWallet\\src\\components\\SignFormContent.js",[],"S:\\DWallet\\src\\components\\SignTransactionFormContent.js",[],"S:\\DWallet\\src\\utils\\walletProvider\\factory.js",[],"S:\\DWallet\\src\\utils\\walletProvider\\localStorage.js",[],"S:\\DWallet\\src\\utils\\fetch-loop.ts",[],"S:\\DWallet\\src\\components\\ConnectionsList.js",[],["301","302"],"S:\\DWallet\\src\\utils\\notifications.js",[],"S:\\DWallet\\src\\utils\\walletProvider\\ledger.js",[],"S:\\DWallet\\src\\components\\instructions\\TokenInstruction.js",[],"S:\\DWallet\\src\\utils\\tokens\\index.js",[],"S:\\DWallet\\src\\utils\\diffie-hellman\\index.js",[],"S:\\DWallet\\src\\utils\\walletProvider\\ledger-core.js",[],"S:\\DWallet\\src\\components\\instructions\\LabelValue.js",[],"S:\\DWallet\\src\\utils\\diffie-hellman\\ed2curve.js",[],"S:\\DWallet\\src\\components\\instructions\\SystemInstruction.js",[],"S:\\DWallet\\src\\components\\instructions\\DexInstruction.js",[],"S:\\DWallet\\src\\components\\instructions\\StakeInstruction.js",[],"S:\\DWallet\\src\\components\\instructions\\UnknownInstruction.js",[],"S:\\DWallet\\src\\components\\instructions\\NewOrder.js",[],"S:\\DWallet\\src\\utils\\transactions.ts",[],"S:\\DWallet\\src\\components\\DomainsList.tsx",[],"S:\\DWallet\\src\\components\\SwapButton.js",[],"S:\\DWallet\\src\\components\\MergeAccountsDialog.js",[],"S:\\DWallet\\src\\components\\EditAccountNameDialog.js",[],"S:\\DWallet\\src\\components\\CloseTokenAccountButton.js",[],"S:\\DWallet\\src\\components\\TokenIcon.js",[],"S:\\DWallet\\src\\utils\\config.js",[],"S:\\DWallet\\src\\components\\DepositDialog.js",[],"S:\\DWallet\\src\\components\\SendDialog.js",[],"S:\\DWallet\\src\\components\\AddTokenDialog.js",[],"S:\\DWallet\\src\\components\\TokenInfoDialog.js",[],"S:\\DWallet\\src\\utils\\swap\\api.js",[],"S:\\DWallet\\src\\components\\FtxPay\\FtxPayDialog.js",[],"S:\\DWallet\\src\\utils\\markets.ts",["303"],"import { MARKETS } from '@project-serum/serum';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { MAINNET_URL } from './connection';\r\n\r\ninterface Markets {\r\n  [coin: string]: {\r\n    publicKey: PublicKey;\r\n    name: string;\r\n    deprecated?: boolean;\r\n  };\r\n}\r\n\r\nexport const serumMarkets = (() => {\r\n  const m: Markets = {};\r\n  MARKETS.forEach((market) => {\r\n    const coin = market.name.split('/')[0];\r\n    if (m[coin]) {\r\n      // Only override a market if it's not deprecated\t.\r\n      if (!m.deprecated) {\r\n        m[coin] = {\r\n          publicKey: market.address,\r\n          name: market.name.split('/').join(''),\r\n        };\r\n      }\r\n    } else {\r\n      m[coin] = {\r\n        publicKey: market.address,\r\n        name: market.name.split('/').join(''),\r\n      };\r\n    }\r\n  });\r\n  return m;\r\n})();\r\n\r\n// Create a cached API wrapper to avoid rate limits.\r\nclass PriceStore {\r\n  cache: {};\r\n\r\n  constructor() {\r\n    this.cache = {};\r\n  }\r\n\r\n  async getPrice(connection, marketName): Promise<number | undefined> {\r\n    return Promise.resolve(undefined);\r\n\r\n    /*\r\n    return new Promise((resolve, reject) => {\r\n      if (connection._rpcEndpoint !== MAINNET_URL) {\r\n        resolve(undefined);\r\n        return;\r\n      }\r\n      if (this.cache[marketName] === undefined) {\r\n        fetch(`https://serum-api.bonfida.com/orderbooks/${marketName}`).then(\r\n          (resp) => {\r\n            resp.json().then((resp) => {\r\n              if (resp.data.asks === null || resp.data.bids === null) {\r\n                resolve(undefined);\r\n              } else if (\r\n                resp.data.asks.length === 0 &&\r\n                resp.data.bids.length === 0\r\n              ) {\r\n                resolve(undefined);\r\n              } else if (resp.data.asks.length === 0) {\r\n                resolve(resp.data.bids[0].price);\r\n              } else if (resp.data.bids.length === 0) {\r\n                resolve(resp.data.asks[0].price);\r\n              } else {\r\n                const mid =\r\n                  (resp.data.asks[0].price + resp.data.bids[0].price) / 2.0;\r\n                this.cache[marketName] = mid;\r\n                resolve(this.cache[marketName]);\r\n              }\r\n            });\r\n          },\r\n        );\r\n      } else {\r\n        return resolve(this.cache[marketName]);\r\n      }\r\n    });\r\n    */\r\n  }\r\n}\r\n\r\nexport const priceStore = new PriceStore();\r\n","S:\\DWallet\\src\\utils\\region.ts",[],"S:\\DWallet\\src\\components\\CopyableDisplay.js",[],"S:\\DWallet\\src\\utils\\swap\\eth.js",["304","305"],"import React, { useEffect, useState } from 'react';\r\nimport Web3 from 'web3';\r\nimport ERC20_ABI from './erc20-abi.json';\r\nimport SWAP_ABI from './swap-abi.json';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useCallAsync } from '../notifications';\r\nimport { isExtension } from '../utils';\r\n\r\nconst web3 = new Web3(window.ethereum);\r\n// Change to use estimated gas limit\r\nconst SUGGESTED_GAS_LIMIT = 200000;\r\n\r\nexport function useEthAccount() {\r\n  const [account, setAccount] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!window.ethereum) {\r\n      return;\r\n    }\r\n    const onChange = (accounts) =>\r\n      setAccount(accounts.length > 0 ? accounts[0] : null);\r\n    window.ethereum.request({ method: 'eth_accounts' }).then(onChange);\r\n    window.ethereum.on('accountsChanged', onChange);\r\n    return () => window.ethereum.removeListener('accountsChanged', onChange);\r\n  }, []);\r\n\r\n  return account;\r\n}\r\n\r\nexport async function getErc20Balance(account, erc20Address) {\r\n  if (!erc20Address) {\r\n    return parseInt(await web3.eth.getBalance(account)) / 1e18;\r\n  }\r\n\r\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\r\n  const [value, decimals] = await Promise.all([\r\n    erc20.methods.balanceOf(account).call(),\r\n    erc20.methods.decimals().call(),\r\n  ]);\r\n  return parseInt(value, 10) / 10 ** parseInt(decimals, 10);\r\n}\r\n\r\nexport async function estimateErc20SwapFees({\r\n  erc20Address,\r\n  swapAddress,\r\n  ethAccount,\r\n}) {\r\n  if (!erc20Address) {\r\n    return estimateEthSwapFees({ swapAddress });\r\n  }\r\n\r\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\r\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\r\n\r\n  const approveAmount = addDecimals('100000000', decimals);\r\n\r\n  let approveEstimatedGas = await erc20.methods\r\n    .approve(swapAddress, approveAmount)\r\n    .estimateGas({ from: ethAccount });\r\n  // Account for Metamask over-estimation\r\n  approveEstimatedGas *= 1.5;\r\n\r\n  // Use estimated gas limit for now\r\n  const swapEstimatedGas = SUGGESTED_GAS_LIMIT;\r\n\r\n  const gasPrice = (await web3.eth.getGasPrice()) * 1e-18;\r\n\r\n  return [approveEstimatedGas * gasPrice, swapEstimatedGas * gasPrice];\r\n}\r\n\r\nexport async function estimateEthSwapFees() {\r\n  const estimatedGas = SUGGESTED_GAS_LIMIT;\r\n\r\n  const gasPrice = (await web3.eth.getGasPrice()) * 1e-18;\r\n\r\n  return estimatedGas * gasPrice;\r\n}\r\n\r\nexport async function swapErc20ToSpl({\r\n  ethAccount,\r\n  erc20Address,\r\n  swapAddress,\r\n  destination,\r\n  amount, // string\r\n  onStatusChange,\r\n}) {\r\n  if (!erc20Address) {\r\n    return swapEthToSpl({\r\n      ethAccount,\r\n      swapAddress,\r\n      destination,\r\n      amount,\r\n      onStatusChange,\r\n    });\r\n  }\r\n\r\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\r\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\r\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\r\n\r\n  const encodedAmount = addDecimals(amount, decimals);\r\n\r\n  const approveTx = erc20.methods\r\n    .approve(swapAddress, encodedAmount)\r\n    .send({ from: ethAccount });\r\n  await waitForTxid(approveTx);\r\n\r\n  onStatusChange({ step: 1 });\r\n\r\n  const swapTx = swap.methods\r\n    .swapErc20(erc20Address, destination, encodedAmount)\r\n    .send({ from: ethAccount, gasLimit: SUGGESTED_GAS_LIMIT });\r\n  const swapTxid = await waitForTxid(swapTx);\r\n\r\n  onStatusChange({ step: 2, txid: swapTxid, confirms: 0 });\r\n\r\n  await Promise.all([\r\n    approveTx,\r\n    swapTx,\r\n    waitForConfirms(swapTx, onStatusChange),\r\n  ]);\r\n\r\n  onStatusChange({ step: 3 });\r\n}\r\n\r\nexport async function swapEthToSpl({\r\n  ethAccount,\r\n  swapAddress,\r\n  destination,\r\n  amount,\r\n  onStatusChange,\r\n}) {\r\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\r\n\r\n  const encodedAmount = addDecimals(amount, 18);\r\n  const swapTx = swap.methods\r\n    .swapEth(destination)\r\n    .send({ from: ethAccount, value: encodedAmount });\r\n  const swapTxid = await waitForTxid(swapTx);\r\n\r\n  onStatusChange({ step: 2, txid: swapTxid, confirms: 0 });\r\n\r\n  await Promise.all([swapTx, waitForConfirms(swapTx, onStatusChange)]);\r\n\r\n  onStatusChange({ step: 3 });\r\n}\r\n\r\nfunction addDecimals(str, decimals) {\r\n  if (!/^\\d*\\.?\\d*$/.test(str)) {\r\n    throw new Error('Invalid number');\r\n  }\r\n  if (!str.includes('.')) {\r\n    str += '.';\r\n  }\r\n  let [intStr, fractionStr] = str.split('.');\r\n  if (fractionStr.length > decimals) {\r\n    fractionStr = fractionStr.slice(0, decimals);\r\n  } else {\r\n    fractionStr += '0'.repeat(decimals - fractionStr.length);\r\n  }\r\n  return (intStr + fractionStr).replace(/^0+/, '') || '0';\r\n}\r\n\r\nconst pendingNonces = new Set();\r\n\r\nexport async function withdrawEth(from, withdrawal, callAsync) {\r\n  const { params, signature } = withdrawal.txData;\r\n  const swap = new web3.eth.Contract(SWAP_ABI, params[1]);\r\n  let method, nonce;\r\n  if (params[0] === 'withdrawErc20') {\r\n    method = swap.methods.withdrawErc20(\r\n      params[2],\r\n      params[3],\r\n      params[4],\r\n      params[5],\r\n      signature,\r\n    );\r\n    nonce = params[5];\r\n  } else if (params[0] === 'withdrawEth') {\r\n    method = swap.methods.withdrawEth(\r\n      params[2],\r\n      params[3],\r\n      params[4],\r\n      signature,\r\n    );\r\n    nonce = params[4];\r\n  } else {\r\n    return;\r\n  }\r\n  if (pendingNonces.has(nonce)) {\r\n    return;\r\n  }\r\n  try {\r\n    await method.estimateGas();\r\n  } catch (e) {\r\n    return;\r\n  }\r\n  pendingNonces.add(nonce);\r\n  await callAsync(method.send({ from, gasLimit: SUGGESTED_GAS_LIMIT }), {\r\n    progressMessage: `Completing ${withdrawal.coin.ticker} transfer...`,\r\n  });\r\n  pendingNonces.delete(nonce);\r\n}\r\n\r\nfunction waitForTxid(tx) {\r\n  return new Promise((resolve, reject) => {\r\n    tx.once('transactionHash', resolve).catch(reject);\r\n  });\r\n}\r\n\r\nfunction waitForConfirms(tx, onStatusChange) {\r\n  return new Promise((resolve, reject) => {\r\n    let resolved = false;\r\n    tx.on('confirmation', (confirms, receipt) => {\r\n      if (!resolved) {\r\n        onStatusChange({ confirms: confirms + 1 });\r\n        if (!receipt.status) {\r\n          reject('Transaction failed');\r\n          resolved = true;\r\n        } else if (confirms >= 11) {\r\n          resolve();\r\n          resolved = true;\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function ConnectToMetamaskButton() {\r\n  const callAsync = useCallAsync();\r\n\r\n  if (!window.ethereum) {\r\n    return (\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        component=\"a\"\r\n        href={isExtension == \"fixme\" ? 'https://sollet.io' : 'https://metamask.io/'}\r\n        target=\"_blank\"\r\n        rel=\"noopener\"\r\n      >\r\n        {isExtension == \"fixme\" ? 'Open sollet.io' : 'Connect to MetaMask'}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  function connect() {\r\n    callAsync(\r\n      window.ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      }),\r\n      {\r\n        progressMessage: 'Connecting to MetaMask...',\r\n        successMessage: 'Connected to MetaMask',\r\n      },\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Button color=\"primary\" variant=\"outlined\" onClick={connect}>\r\n      Connect to MetaMask\r\n    </Button>\r\n  );\r\n}\r\n","S:\\DWallet\\src\\components\\EthFeeEstimate.tsx",[],"S:\\DWallet\\src\\utils\\name-service\\index.ts",[],{"ruleId":"306","severity":1,"message":"307","line":5,"column":13,"nodeType":"308","messageId":"309","endLine":5,"endColumn":26},{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","severity":1,"message":"315","line":4,"column":3,"nodeType":"308","messageId":"309","endLine":4,"endColumn":16},{"ruleId":"306","severity":1,"message":"315","line":1,"column":10,"nodeType":"308","messageId":"309","endLine":1,"endColumn":23},{"ruleId":"306","severity":1,"message":"316","line":2,"column":8,"nodeType":"308","messageId":"309","endLine":2,"endColumn":15},{"ruleId":"317","severity":1,"message":"318","line":6,"column":5,"nodeType":"319","endLine":6,"endColumn":83},{"ruleId":"306","severity":1,"message":"320","line":29,"column":8,"nodeType":"308","messageId":"309","endLine":29,"endColumn":15},{"ruleId":"306","severity":1,"message":"321","line":35,"column":8,"nodeType":"308","messageId":"309","endLine":35,"endColumn":17},{"ruleId":"306","severity":1,"message":"322","line":36,"column":8,"nodeType":"308","messageId":"309","endLine":36,"endColumn":16},{"ruleId":"306","severity":1,"message":"323","line":40,"column":8,"nodeType":"308","messageId":"309","endLine":40,"endColumn":18},{"ruleId":"306","severity":1,"message":"324","line":62,"column":8,"nodeType":"308","messageId":"309","endLine":62,"endColumn":18},{"ruleId":"306","severity":1,"message":"325","line":63,"column":8,"nodeType":"308","messageId":"309","endLine":63,"endColumn":15},{"ruleId":"306","severity":1,"message":"326","line":64,"column":8,"nodeType":"308","messageId":"309","endLine":64,"endColumn":19},{"ruleId":"306","severity":1,"message":"327","line":115,"column":24,"nodeType":"308","messageId":"309","endLine":115,"endColumn":39},{"ruleId":"306","severity":1,"message":"328","line":116,"column":10,"nodeType":"308","messageId":"309","endLine":116,"endColumn":21},{"ruleId":"306","severity":1,"message":"329","line":116,"column":23,"nodeType":"308","messageId":"309","endLine":116,"endColumn":37},{"ruleId":"306","severity":1,"message":"330","line":122,"column":9,"nodeType":"308","messageId":"309","endLine":122,"endColumn":15},{"ruleId":"306","severity":1,"message":"331","line":153,"column":9,"nodeType":"308","messageId":"309","endLine":153,"endColumn":22},{"ruleId":"310","replacedBy":"332"},{"ruleId":"312","replacedBy":"333"},{"ruleId":"314","severity":1,"message":"334","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":21},{"ruleId":"335","severity":1,"message":"336","line":238,"column":27,"nodeType":"337","messageId":"338","endLine":238,"endColumn":29},{"ruleId":"335","severity":1,"message":"336","line":242,"column":22,"nodeType":"337","messageId":"338","endLine":242,"endColumn":24},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["339"],"no-negated-in-lhs",["340"],"@typescript-eslint/no-unused-vars","'clusterApiUrl' is defined but never used.","'SvgIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AddIcon' is defined but never used.","'MergeType' is defined but never used.","'SortIcon' is defined but never used.","'ftxPayIcon' is defined but never used.","'SwapButton' is defined but never used.","'DnsIcon' is defined but never used.","'DomainsList' is defined but never used.","'setSortAccounts' is assigned a value but never used.","'showDomains' is assigned a value but never used.","'setShowDomains' is assigned a value but never used.","'region' is assigned a value but never used.","'totalUsdValue' is assigned a value but never used.",["339"],["340"],"'MAINNET_URL' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]